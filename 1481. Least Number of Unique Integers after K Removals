// Sort
class Solution {
public:
    int findLeastNumOfUniqueInts(vector<int>& arr, int k) {
        unordered_map<int, int> freq;
        for(int num: arr) freq[num]++;
        vector<int> counts;
        for(auto it: freq) counts.push_back(it.second);
        sort(counts.begin(), counts.end());
        int i = 0;
        for(i = 0; i < counts.size() && counts[i] <= k; i++) {
            k -= counts[i];
        }
        return counts.size() - i;
    }
};

OR

// Priority Queue
class Solution {
public:
    int findLeastNumOfUniqueInts(vector<int>& arr, int k) {
        unordered_map<int, int> Map;
        for(int i = 0; i < arr.size(); i++) Map[arr[i]]++;
        vector<int> count;
        for(auto iter: Map) count.push_back(-iter.second);
        priority_queue<int> PQ(count.begin(), count.end());
        while(!PQ.empty() && -PQ.top() <= k) {
            k += PQ.top();
            PQ.pop();
        }
        return PQ.size();
    }
};
