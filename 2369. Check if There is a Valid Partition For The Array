// C++
class Solution {
public:
    bool validPartition(vector<int>& nums) {
        int n = nums.size();
        vector<bool> DP(n + 1);
        DP[0] = true;
        DP[2] = nums[0] == nums[1];
        for(int i = 2; i < n; i++) {
            bool choice1 = (nums[i] == nums[i - 1]);
            bool choice2 = choice1 && (nums[i] == nums[i - 2]);
            bool choice3 = (nums[i - 2] == nums[i - 1] - 1) && (nums[i - 1] == nums[i] - 1); 
            DP[i + 1] = ((choice2 || choice3) && DP[i - 2]) || (choice1 && DP[i - 1]);
        }
        return DP[n];
    }
};

----------------------------------------------------

// Golang
func validPartition(nums []int) bool {
    var n int = len(nums)
    DP := make([]bool, n + 1)
    DP[0] = true
    DP[2] = nums[0] == nums[1]
    for i := 2; i < n; i++ {
        choice1 := (nums[i] == nums[i - 1])
        choice2 := choice1 && (nums[i] == nums[i - 2])
        choice3 := (nums[i - 2] == nums[i - 1] - 1) && (nums[i - 1] == nums[i] - 1)
        DP[i + 1] = ((choice2 || choice3) && DP[i - 2]) || (choice1 && DP[i - 1])
    }
    return DP[n]
}
