class Solution {
    int memo[500][500][4][2];
    int dirs[4][2] = {{-1, -1}, {-1, 1}, {1, 1}, {1, -1}};
    int dfs(int currX, int currY, vector<vector<int>>& grid, int dir, bool turnAllowed, int nextSeq, int memo[500][500][4][2]) {
        int nextX = currX + dirs[dir][0], nextY = currY + dirs[dir][1];
        if(nextX < 0 || nextY < 0 || nextX >= grid.size() || nextY >= grid[0].size() || grid[nextX][nextY] != nextSeq) {
            return 0;
        }
        if(memo[nextX][nextY][dir][turnAllowed] != -1) {
            return memo[nextX][nextY][dir][turnAllowed];
        }
        int ans = dfs(nextX, nextY, grid, dir, turnAllowed, 2 - nextSeq, memo);
        if(turnAllowed) {
            ans = max(ans, dfs(nextX, nextY, grid, (dir + 1) % 4, false, 2 - nextSeq, memo));
        }
        return memo[nextX][nextY][dir][turnAllowed] = ans + 1;
    }
public:
    int lenOfVDiagonal(vector<vector<int>>& grid) {
        int ans = 0;
        memset(memo, -1, sizeof(memo));
        for(int i = 0; i < grid.size(); i++) {
            for(int j = 0; j < grid[0].size(); j++) {
                if(grid[i][j] == 1) {
                    for(int dir = 0; dir < 4; dir++) {
                        ans = fmax(ans, 1 + dfs(i, j, grid, dir, true, 2, memo));
                    }
                }
            }
        }
        return ans;
    }
};
