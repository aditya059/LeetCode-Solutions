// C++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if(head == nullptr || head -> next == nullptr)
            return nullptr;
        ListNode* slow = head;
        ListNode *fast = head;
        while(fast && fast -> next) {
            slow = slow -> next;
            fast = fast -> next -> next;
            if(slow == fast) 
                break;
        }
        if(slow != fast) return nullptr;
        fast = head; 
        while(fast != slow) {
            slow = slow -> next;
            fast = fast -> next;
        }
        return slow;
    }
};


-----------------------------------------------------------
// Golang
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func detectCycle(head *ListNode) *ListNode {
    if head == nil || head.Next == nil {return nil}
    slow := head
    fast := head
    for fast != nil && fast.Next != nil {
        slow = slow.Next
        fast = fast.Next.Next
        if slow == fast {break}
    }
    if slow != fast {return nil}
    fast = head 
    for fast != slow {
        slow = slow.Next
        fast = fast.Next
    }
    return slow
}
