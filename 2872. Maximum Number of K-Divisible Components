class Solution {
    long dfs(int curr, int parent, vector<int> adjList[], vector<int> &values, int k, int &ans) {
        long sum = values[curr];
        for(int next: adjList[curr]) {
            if(next != parent)
                sum += dfs(next, curr, adjList, values, k, ans);
        }
        if(sum % k == 0) {
            ans++;
            return 0;
        }
        return sum;
    }
public:
    int maxKDivisibleComponents(int n, vector<vector<int>>& edges, vector<int>& values, int k) {
        vector<int> adjList[n];
        for(int i = 0; i < edges.size(); i++) {
            adjList[edges[i][0]].push_back(edges[i][1]);
            adjList[edges[i][1]].push_back(edges[i][0]);
        }
        int ans = 0;
        dfs(0, -1, adjList, values, k, ans);
        return ans;
    }
};
