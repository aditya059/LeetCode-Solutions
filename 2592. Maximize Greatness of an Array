// C++
class Solution {
public:
    int maximizeGreatness(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size(), ans = 0;
        for(int i = 0, j = 1; i < n && j < n; i++, j++) {
            while(j < n && nums[j] <= nums[i]) j++;
            if(j < n) ans++;
        }      
        return ans;
    }
};

OR

class Solution {
public:
    int maximizeGreatness(vector<int>& nums) {
        unordered_map<int, int> Map;
        int maxFreq = 0;
        for(int num: nums) {
            Map[num]++;
            maxFreq = max(maxFreq, Map[num]);
        }      
        return nums.size() - maxFreq;
    }
};

--------------------------------------------------------------
// Golang
func maximizeGreatness(nums []int) int {
    sort.Ints(nums)
    var n, ans int = len(nums), 0
    for i, j := 0, 1; i < n && j < n; i, j = i + 1, j + 1 {
        for j < n && nums[j] <= nums[i] {j++}
        if j < n {ans++}
    }      
    return ans
}
