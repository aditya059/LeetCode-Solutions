class MyCircularQueue {
private:
    vector<int> Queue;
    int front;
    int rear;
    int k;
public:
    
    MyCircularQueue(int k) {
        Queue.resize(k);
        front = -1;
        rear = -1;
        this -> k = k;
    }
    
    bool enQueue(int value) {
        if(isFull()) return false;
        if(isEmpty()) { 
            front = rear = 0;
        }
        else
            rear = (rear + 1) % k;
        Queue[rear] = value;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty()) return false;
        if(front == rear) 
            rear = front = -1;
        else
            front = (front + 1) % k;
        return true;
    }
    
    int Front() {
        if(isEmpty()) return -1;
        return Queue[front];
    }
    
    int Rear() {
        if(isEmpty()) return -1;
        return Queue[rear];
    }
    
    bool isEmpty() {
        return rear == -1;
    }
    
    bool isFull() {
        return (rear + 1) % k == front;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
