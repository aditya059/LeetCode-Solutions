// C++
class Solution {
    bool check(vector<int> &nums, int mid, int k) {
        int len = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] <= mid) 
                len++;
            else {
                k -= ceil(len / 2.0);
                len = 0;
            }
        }
        k -= ceil(len / 2.0);
        return k <= 0;
    }
public:
    int minCapability(vector<int>& nums, int k) {
        int low = 0;
        // int high = 1e9;
        int high = *max_element(nums.begin(), nums.end());
        int ans = high;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(check(nums, mid, k)) {
                ans = min(ans, mid);
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
};


// Golang
func check(nums []int, mid, k int) bool {
    var length int = 0
    for i := 0; i < len(nums); i++ {
        if nums[i] <= mid {
            length++
        } else {
            k -= int(math.Ceil(float64(length) / 2.0))
            length = 0
        }
    }
    k -= int(math.Ceil(float64(length) / 2.0))
    return k <= 0
}

func minCapability(nums []int, k int) int {
    var low, high int = 0, 1e9
    var ans int = high
    for low <= high {
        var mid int = low + (high - low) / 2
        if check(nums, mid, k) {
            if mid < ans {
                ans = mid
            }
            high = mid - 1
        } else {
            low = mid + 1
        }
    }
    return ans
}
