// TC = O(n sqrt(n))
class Solution {
public:
    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        unordered_map<int, int> Map;
        for(int i = 0; i < nums2.size(); i++) {
            Map[k * nums2[i]]++;
        }
        long long  ans = 0;
        for(int i = 0; i < nums1.size(); i++) {
            int m = sqrt(nums1[i]);
            for(int j = 1; j <= m; j++) {
                if(nums1[i] % j == 0) {
                    ans += Map[j];
                    if(nums1[i] / j != j) ans += Map[nums1[i] / j];
                }
            }
        }
        return ans;
    }
};

OR

// TC = O(n log n)
class Solution {
public:
    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        unordered_map<int, int> Map;
        for(int i = 0; i < nums2.size(); i++) {
            Map[k * nums2[i]]++;
        }
        vector<int> count(1000001);
        for(auto [num, freq]: Map) {
            for(int j = num; j < 1000001; j += num) {
                count[j] += freq;
            }
        }
        long long  ans = 0;
        for(int i = 0; i < nums1.size(); i++) {
            ans += count[nums1[i]];
        }
        return ans;
    }
};
