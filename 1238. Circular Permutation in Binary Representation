class Solution {
    void dfs(int curr, int &n, int &target, vector<bool> &visited, vector<int> &temp, vector<int> &ans) {
        if(ans.size() != 0 || visited[curr]) {
            if(curr == target && temp.size() == (1 << n)) {
                ans = temp;
            }
            return;
        }
        visited[curr] = true;
        temp.push_back(curr);
        for(int i = 0; i < n; i++) {
            dfs(curr ^ (1 << i), n, target, visited, temp, ans);
        }
        temp.pop_back();
        visited[curr] = false;
    }
public:
    vector<int> circularPermutation(int n, int start) {
        int m = 1 << n;
        vector<bool> visited(m);
        vector<int> ans, temp;
        dfs(start, n, start, visited, temp, ans);
        return ans;
    }
};
