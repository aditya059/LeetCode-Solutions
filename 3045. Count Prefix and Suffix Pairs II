class Solution {
    typedef struct TrieNode {
        int count = 0;
        map<pair<char, char>, TrieNode*> children;
    } TrieNode;
    void insertWord(TrieNode *root, string &word, long long &ans) {
        TrieNode *curr = root;
        for(int i = 0; i < word.size(); i++) {
            char ch1 = word[i], ch2 = word[word.size() - i - 1];
            if(curr -> children.find({ch1, ch2}) == curr -> children.end())
               curr -> children[{ch1, ch2}] = new TrieNode();
            curr = curr -> children[{ch1, ch2}];
            ans += curr -> count;
        }
        curr -> count++;
    }
public:
    long long countPrefixSuffixPairs(vector<string>& words) {
        long long ans = 0;
        TrieNode *root = new TrieNode();
        for(int i = 0; i < words.size(); i++) {
            insertWord(root, words[i], ans);
        }
        return ans;
    }
};
