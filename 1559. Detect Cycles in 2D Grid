class Solution {
    vector<int> dirs[4] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    void dfs(int i, int j, int p, int q, vector<vector<char>> &grid, vector<vector<char>> &color, bool &ans, char &match) {
        if(i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size() || grid[i][j] != match || color[i][j] == 'B') return;
        if(ans || color[i][j] == 'G') {
            ans = true;
            return;
        } 
        color[i][j] = 'G';
        for(vector<int> dir: dirs) {
            int m = i + dir[0];
            int n = j + dir[1];
            if(m != p || n != q) {
                dfs(m, n, i, j, grid, color, ans, match);
            }
        }
        color[i][j] = 'B';
    }
public:
    bool containsCycle(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<char>> color(m, vector<char>(n, 'W'));
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(color[i][j] == 'W') {
                    bool ans = false;
                    dfs(i, j, -1, -1, grid, color, ans, grid[i][j]);
                    if(ans) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
};

OR

class Solution {
    vector<int> dirs[4] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    bool dfs(int i, int j, int p, int q, vector<vector<char>> &grid, vector<vector<bool>> &visited) {
        visited[i][j] = true;
        bool ans = false;
        for(vector<int> dir: dirs) {
            int m = i + dir[0];
            int n = j + dir[1];
            if(m < 0 || n < 0 || m >= grid.size() || n >= grid[0].size() || (m == p && n == q) || grid[i][j] != grid[m][n]) continue;
            if(visited[m][n]) return true;
            ans |= dfs(m, n, i, j, grid, visited);
        }
        return ans;
    }
public:
    bool containsCycle(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        bool ans = false;
        vector<vector<bool>> visited(m, vector<bool>(n));
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(!visited[i][j])
                    ans |= dfs(i, j, -1, -1, grid, visited);
            }
        }
        return ans;
    }
};
