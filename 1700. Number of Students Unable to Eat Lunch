// SC = O(n)
class Solution {
public:
    int countStudents(vector<int>& students, vector<int>& sandwiches) {
        int n = students.size();
        queue<int> Queue;
        for(int i = 0; i < n; i++) {
            Queue.push(students[i]);
        }
        int j = 0, cantMatch = 0;
        while(!Queue.empty() && cantMatch < Queue.size()) {
            if(Queue.front() == sandwiches[j]) {
                Queue.pop();
                j++;
                cantMatch = 0;
            } else {
                Queue.push(Queue.front());
                Queue.pop();
                cantMatch++;
            }
        }
        return n - j;
    }
};


OR


// SC = O(1)
class Solution {
public:
    int countStudents(vector<int>& students, vector<int>& sandwiches) {
        int n = students.size(), circle = 0, square = 0;
        for(int i = 0; i < n; i++) {
            if(students[i]) square++;
            else circle++;
        }
        for(int i = 0; i < sandwiches.size(); i++) {
            if(sandwiches[i]) square--;
            else circle--;
            if(square < 0 || circle < 0) return square + circle + 1;
        }
        return 0;
    }
};
