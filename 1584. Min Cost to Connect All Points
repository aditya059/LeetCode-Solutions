class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n = points.size();
        vector<pair<int, int>> adjList[n];
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                int dist = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]);
                adjList[i].push_back({j, dist});
                adjList[j].push_back({i, dist});
            }
        }
        int ans = 0;
        set<pair<int, int>> PQ;
        PQ.insert({0, 0});
        vector<int> distance(n, INT_MAX);
        distance[0] = 0;
        while(!PQ.empty()) {
            pair<int, int> curr = *PQ.begin();
            PQ.erase(PQ.begin());
            int u = curr.second;
            ans += curr.first;
            distance[u] = -1;
            for(pair<int, int> v: adjList[u]) {
                if(distance[v.first] != -1 && v.second < distance[v.first]) {
                    PQ.erase({distance[v.first], v.first});
                    distance[v.first] = v.second;
                    PQ.insert({v.second, v.first});
                }
            }
        }
        return ans;
    }
};          
