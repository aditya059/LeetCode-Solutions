/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, int &targetSum, int &ans, unordered_map<long, int> &sumCount, long currSum) {
        if(!root) return;
        currSum += root -> val;
        if(sumCount.find(currSum - targetSum) != sumCount.end())
            ans += sumCount[currSum - targetSum];
        sumCount[currSum]++;
        dfs(root -> left, targetSum, ans, sumCount, currSum);
        dfs(root -> right, targetSum, ans, sumCount, currSum);
        sumCount[currSum]--;
    }
    int pathSum(TreeNode* root, int targetSum) {
        int ans = 0;
        long currSum = 0;
        unordered_map<long, int> sumCount;
        sumCount[0] = 1;
        dfs(root, targetSum, ans, sumCount, currSum);
        return ans;
    }
};
