// C++
class Solution {
public:
    long long gridGame(vector<vector<int>>& grid) {
        int n = grid[0].size();
        if(n == 1) return 0;
        vector<long long> prefix(n);
        prefix[0] = grid[1][0];
        for(int i = 1; i < n; i++) prefix[i] += prefix[i - 1] + grid[1][i];
        long long sum = 0, ans = prefix[n - 2];
        for(int i = n - 1; i > 0; i--) {
            sum += grid[0][i];
            ans = min(ans, max(sum, (i > 1? prefix[i - 2]: 0)));
        }
        return ans;
    }
};


// Golang
func min(a, b int64) int64 {
    if a < b {return a}
    return b
}

func max(a, b int64) int64 {
    if a > b {return a}
    return b
}

func gridGame(grid [][]int) int64 {
    var n int = len(grid[0])
    if n == 1 {return 0}
    prefix := make([]int64, n)
    prefix[0] = int64(grid[1][0])
    for i := 1; i < n; i++ {prefix[i] += prefix[i - 1] + int64(grid[1][i])}
    var sum, ans int64 = 0, prefix[n - 2]
    for i := n - 1; i > 0; i-- {
        sum += int64(grid[0][i])
        var val int64 = 0
        if i > 1 {val = prefix[i - 2]} 
        ans = min(ans, max(sum, val));
    }
    return ans
}
