class Solution {
public:
    int leastBricks(vector<vector<int>>& wall) {
        map<int, int> cross;
        int sum;
        for(vector<int> w: wall) {
            sum = 0;
            for(int a: w) {
                sum += a;
                cross[sum]++;
            }
        } 
        int maxEdge = 0;
        for(auto iter: cross) {
            if(iter.first != sum)
                maxEdge = max(maxEdge, iter.second);
        }
        return wall.size() - maxEdge;
    }
};

OR

class Solution {
public:
    int leastBricks(vector<vector<int>>& wall) {
        unordered_map<int, int> cross;
        int ans = wall.size();
        for(vector<int> w: wall) {
            int sum = 0;
            for(int i = 0; i < w.size() - 1; i++) {
                sum += w[i];
                cross[sum]++;
                ans = min(ans, (int)wall.size() - cross[sum]);
            }
        } 
        return ans;
    }
};
