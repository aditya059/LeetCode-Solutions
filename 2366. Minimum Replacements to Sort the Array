// C++
class Solution {
public:
    long long minimumReplacement(vector<int>& nums) {
        long long ans = 0;
        for(int i = nums.size() - 2; i >= 0; i--) {
            int numOfParts = ceil(nums[i] * 1.0 / nums[i + 1]);
            ans += ceil(numOfParts) - 1;
            nums[i] = nums[i] / numOfParts;
        }
        return ans;
    }
};


// Golang
func minimumReplacement(nums []int) int64 {
    var ans int64 = 0
    for i := len(nums) - 2; i >= 0; i-- {
        numOfParts := int(math.Ceil(float64(nums[i]) / float64(nums[i + 1])))
        ans += int64(numOfParts) - 1
        nums[i] = nums[i] / numOfParts
    }
    return ans
}
