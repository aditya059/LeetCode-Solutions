class Solution {
public:
    int maxSubarrayLength(vector<int>& nums, int k) {
        int ans = 0;
        unordered_map<int, int> Map;
        for(int start = 0, end = 0; end < nums.size(); end++) {
            Map[nums[end]]++;
            while(Map[nums[end]] > k) {
                Map[nums[start++]]--;
            } 
            ans = max(ans, end - start + 1);
        }
        return ans;
    }
};

OR

func max(a, b int) int {
    if a > b {return a}
    return b
}
func maxSubarrayLength(nums []int, k int) int {
    Map := make(map[int]int)
    ans := 0
    for start, end := 0, 0; end < len(nums); end++ {
        Map[nums[end]]++
        for Map[nums[end]] > k {
            Map[nums[start]]--
            start++
        }
        ans = max(ans, end - start + 1)
    }
    return ans
}
