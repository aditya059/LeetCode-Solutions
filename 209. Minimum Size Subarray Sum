// C++
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& arr) {
        int sum = 0;
        int ans = INT_MAX;
        for(int start = 0, end = 0; end < arr.size(); end++) {
            sum += arr[end];
            while(sum >= target) {
                ans = min(ans, end - start + 1);
                sum -= arr[start++];
            }
        }
        if(ans == INT_MAX)
            return 0;
        return ans;
    }
};


// Golang
func minSubArrayLen(target int, nums []int) int {
    var sum int = 0
    var ans int = math.MaxInt
    for start, end := 0, 0; end < len(nums); end++ {
        sum += nums[end]
        for sum >= target {
            if end - start + 1 < ans {
                ans = end - start + 1
            }
            sum -= nums[start]
            start++
        }
    }
    if ans == math.MaxInt {
        return 0
    }
    return ans
}
