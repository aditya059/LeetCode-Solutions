// C++
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int low = 0;
        int high = arr.size() - 1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(mid > 0 && mid < arr.size() - 1 && arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1])
                return mid;
            else if(mid > 0 && arr[mid - 1] > arr[mid])
                high = mid - 1;
            else
                low = mid + 1;
        }
        return -1;
    }
};


// Golang
func peakIndexInMountainArray(arr []int) int {
    low := 0
    high := len(arr) - 1
    for low <= high {
        mid := low + (high - low) / 2
        if mid > 0 && mid < len(arr) - 1 && arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1] {
            return mid
        } else if mid > 0 && arr[mid - 1] > arr[mid] {
            high = mid - 1
        } else {
            low = mid + 1
        }
    }
    return -1
}
