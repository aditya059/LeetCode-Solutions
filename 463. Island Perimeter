class Solution {
public:
     int dfs(vector<vector<int>>& grid, int i, int j, vector<vector<bool>> &visited) {
        if(i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size() || !grid[i][j])
            return 1;
        if(visited[i][j]) return 0;
        visited[i][j] = true;
        int a = dfs(grid, i - 1, j, visited);
        int b = dfs(grid, i + 1, j, visited);
        int c = dfs(grid, i, j - 1, visited);
        int d = dfs(grid, i, j + 1, visited);
        return a + b + c + d;
    }
    int islandPerimeter(vector<vector<int>>& grid) {
        int ans = 0;
        vector<vector<bool>> visited(grid.size(), vector<bool>(grid[0].size(), false));
        for(int i = 0; i < grid.size(); i++) {
            for(int j = 0; j < grid[0].size(); j++) {
                if(grid[i][j]) {
                    return dfs(grid, i, j, visited);
                }
            }
        }
        return ans;
    }
};


OR


class Solution {
public:
     int isEdge(vector<vector<int>>& grid, int i, int j) {
        return i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size() || !grid[i][j];
    }
    int islandPerimeter(vector<vector<int>>& grid) {
        int ans = 0;
        for(int i = 0; i < grid.size(); i++) {
            for(int j = 0; j < grid[0].size(); j++) {
                if(grid[i][j]) {
                    ans += isEdge(grid, i - 1, j) + isEdge(grid, i + 1, j) + isEdge(grid, i, j - 1) + isEdge(grid, i, j + 1);
                }
            }
        }
        return ans;
    }
};
