// C++
class Solution {
public:
    int longestStrChain(vector<string>& words) {
        sort(words.begin(), words.end(), [&](string &A, string &B) {
            return A.length() < B.length();
        });
        unordered_map<string, int> DP;
        int ans = 0;
        for(int i = 0; i < words.size(); i++) {
            DP[words[i]] = 1;
            for(int j = 0; j < words[i].size(); j++) {
                string word = words[i].substr(0, j) + words[i].substr(j + 1);
                DP[words[i]] = max(DP[words[i]], DP[word] + 1);
                ans = max(ans, DP[words[i]]);
            }
        }
        return ans;
    }
};


// Golang
func max(a, b int) int {
    if a > b {return a}
    return b
}

func longestStrChain(words []string) int {
    sort.Slice(words, func(i, j int) bool {
        return len(words[i]) < len(words[j])
    })
    DP := make(map[string]int)
    ans := 0
    for i := 0; i < len(words); i++ {
        DP[words[i]] = 1
        for j := 0; j < len(words[i]); j++ {
            word := words[i][0: j] + words[i][j + 1:]
            DP[words[i]] = max(DP[words[i]], DP[word] + 1)
            ans = max(ans, DP[words[i]])
        }
    }
    return ans
}
