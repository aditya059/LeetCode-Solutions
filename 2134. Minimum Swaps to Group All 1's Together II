// C++
class Solution {
public:
    int minSwaps(vector<int>& nums) {
        int k = accumulate(nums.begin(), nums.end(), 0);
        int sum = 0, n = nums.size(), ans = INT_MAX;
        for(int i = 0; i < n + k; i++) {
            sum += nums[i % n];
            if(i >= k)
                sum -= nums[i - k];
            if(i >= k - 1)
                ans = min(ans, k - sum);
        }
        return ans;
    }
};


// Golang
func minSwaps(nums []int) int {
    var sum, n, ans, k int = 0, len(nums), math.MaxInt, 0
    for _, num := range nums {k += num}
    for i := 0; i < n + k; i++ {
        sum += nums[i % n]
        if i >= k {
            sum -= nums[i - k]
        }
        if i >= k - 1 && k - sum < ans {
            ans = k - sum
        }
    }
    return ans
}
