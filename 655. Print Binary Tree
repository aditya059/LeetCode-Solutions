/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int height(TreeNode* root) {
        if(root == nullptr) return 0;
        return 1 + max(height(root -> left), height(root -> right));
    }
    void dfs(TreeNode* root, vector<vector<string>> &ans, int r, int c, int h) {
        ans[r][c] = to_string(root -> val);
        if(root -> left)
            dfs(root -> left, ans, r + 1, c - (1 << (h - r - 1)), h);
        if(root -> right)
            dfs(root -> right, ans, r + 1, c + (1 << (h - r - 1)), h);
    }
public:
    vector<vector<string>> printTree(TreeNode* root) {
        int h = height(root), n = (1 << h) - 1;
        vector<vector<string>> ans(h, vector<string>(n, ""));
        dfs(root, ans, 0, (n - 1) / 2, h - 1);
        return ans;
    }
};
