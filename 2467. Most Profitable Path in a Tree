class Solution {
    int dfs(int curr, int parent, int bob, int time, vector<int> &bobDist, vector<int> adjList[], int n, vector<int>& amount) {
        if(curr == bob)
            bobDist[curr] = 0;
        int ans = 0, maxChildIncome = INT_MIN;
        for(int next: adjList[curr]) {
            if(next == parent) continue;
            int childIncome = dfs(next, curr, bob, time + 1, bobDist, adjList, n, amount);
            maxChildIncome = max(maxChildIncome, childIncome);
            bobDist[curr] = min(bobDist[curr], bobDist[next] + 1);
        } 
        if(time < bobDist[curr]) ans = amount[curr];
        else if(time == bobDist[curr]) ans = amount[curr] / 2;
        return maxChildIncome == INT_MIN? ans: ans + maxChildIncome;
    }
public:
    int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount) {
        int n = amount.size();
        vector<int> adjList[n];
        for(int i = 0; i < edges.size(); i++) {
            adjList[edges[i][0]].push_back(edges[i][1]);
            adjList[edges[i][1]].push_back(edges[i][0]);
        }
        vector<int> bobDist(n, n);
        return dfs(0, -1, bob, 0, bobDist, adjList, n, amount);
    }
};
