/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void inorder(vector<int> &nums, TreeNode* root) {
        if(!root) return;
        inorder(nums, root -> left);
        nums.push_back(root -> val);
        inorder(nums, root -> right);
    }
public:
    vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {
        vector<vector<int>> ans;
        vector<int> nums;
        inorder(nums, root);
        for(int query: queries) {
            auto iter = upper_bound(nums.begin(), nums.end(), query);
            int l = iter == nums.begin()? -1: nums[prev(iter) - nums.begin()]; 
            int h = iter == nums.end()? -1: nums[iter - nums.begin()];
            h = l == query? l: h;
            ans.push_back({l, h});
        }
        return ans;
    }
};
