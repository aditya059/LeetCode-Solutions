// C++
class Solution {
public:
    vector<vector<int>> mergeArrays(vector<vector<int>>& nums1, vector<vector<int>>& nums2) {
        int i = 0, j = 0, m = nums1.size(), n = nums2.size();
        vector<vector<int>> ans;
        while(i < m && j < n) {
            if(nums1[i][0] == nums2[j][0]) {
                ans.push_back({nums1[i][0], nums1[i][1] + nums2[j][1]});
                i++; j++;
            } else if(nums1[i][0] < nums2[j][0]) {
                ans.push_back(nums1[i++]);
            } else {
                ans.push_back(nums2[j++]);
            }
        }
        while(i < m) {
            ans.push_back(nums1[i++]); 
        }
        while(j < n) {
            ans.push_back(nums2[j++]);
        }
        return ans;
    }
};

// Golang
func mergeArrays(nums1 [][]int, nums2 [][]int) [][]int {
    var i, j, m, n int = 0, 0, len(nums1), len(nums2)
    ans := [][]int{}
    for i < m && j < n {
        if nums1[i][0] == nums2[j][0] {
            ans = append(ans, []int{nums1[i][0], nums1[i][1] + nums2[j][1]})
            i++
            j++
        } else if nums1[i][0] < nums2[j][0] {
            ans = append(ans, nums1[i])
            i++
        } else {
            ans = append(ans, nums2[j])
            j++
        }
    }
    for i < m {
        ans = append(ans, nums1[i])
        i++ 
    }
    for j < n {
        ans = append(ans, nums2[j])
        j++
    }
    return ans
}
