class StreamChecker {
    typedef struct TrieNode {
        bool isEnd = false;
        TrieNode* children[26];
    } TrieNode;
    TrieNode *root;
    vector<char> queriesVal;
    void insertWord(string &word) {
        TrieNode *curr = root;
        for(int i = word.size() - 1; i >= 0; i--) {
            int ch = word[i] - 'a';
            if(curr -> children[ch] == nullptr)
                curr -> children[ch] = new TrieNode();
            curr = curr -> children[ch];
        }
        curr -> isEnd = true;
    }
public:
    StreamChecker(vector<string>& words) {
        root = new TrieNode();
        for(int i = 0; i < words.size(); i++) {
            insertWord(words[i]);
        }
    }
    
    bool query(char letter) {
        queriesVal.push_back(letter);
        int n = queriesVal.size();
        int m = max(n - 200, 0);  // Max Word Length = 200
        TrieNode *curr = root;
        for(int i = n - 1; i >= m && curr; i--) {
            int ch = queriesVal[i] - 'a';
            if(curr -> children[ch] == nullptr)
                return false;
            curr = curr -> children[ch];
            if(curr && curr -> isEnd == true) return true;
        }
        return false;
    }
};

/**
 * Your StreamChecker object will be instantiated and called as such:
 * StreamChecker* obj = new StreamChecker(words);
 * bool param_1 = obj->query(letter);
 */

OR

class StreamChecker {
    typedef struct TrieNode {
        bool isEnd = false;
        TrieNode* children[26];
    } TrieNode;
    TrieNode *root;
    vector<char> queriesVal;
    int maxWordLen = 0;
    void insertWord(string &word) {
        TrieNode *curr = root;
        for(int i = word.size() - 1; i >= 0; i--) {
            int ch = word[i] - 'a';
            if(curr -> children[ch] == nullptr)
                curr -> children[ch] = new TrieNode();
            curr = curr -> children[ch];
        }
        curr -> isEnd = true;
    }
public:
    StreamChecker(vector<string>& words) {
        root = new TrieNode();
        for(int i = 0; i < words.size(); i++) {
            insertWord(words[i]);
            maxWordLen = max(maxWordLen, (int)words[i].length());
        }
    }
    
    bool query(char letter) {
        queriesVal.push_back(letter);
        int n = queriesVal.size();
        int m = max(n - maxWordLen, 0); 
        TrieNode *curr = root;
        for(int i = n - 1; i >= m && curr; i--) {
            int ch = queriesVal[i] - 'a';
            if(curr -> children[ch] == nullptr)
                return false;
            curr = curr -> children[ch];
            if(curr && curr -> isEnd) return true;
        }
        return false;
    }
};

/**
 * Your StreamChecker object will be instantiated and called as such:
 * StreamChecker* obj = new StreamChecker(words);
 * bool param_1 = obj->query(letter);
 */
