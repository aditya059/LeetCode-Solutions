// C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    pair<int, int> dfs(TreeNode* root, int &ans) {
        if(!root) return {0, 0};
        pair<int, int> l = dfs(root -> left, ans);
        pair<int, int> r = dfs(root -> right, ans);
        int f = 0, s = 0;
        if(root -> left) f = 1 + l.second;
        if(root -> right) s = 1 + r.first;
        ans = max(ans, max(f, s));
        return {f, s};
    }

public:
    int longestZigZag(TreeNode* root) {
        int ans = 0;
        dfs(root, ans);
        return ans;
    }
};

//------------------------------------------------------

// Golang
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

func max(a, b int) int {
    if a > b {return a}
    return b
}

func dfs(root *TreeNode, ans *int) []int {
    if root == nil {return []int{0, 0}}
    l := dfs(root.Left, ans)
    r := dfs(root.Right, ans)
    var f, s int = 0, 0
    if root.Left != nil {f = 1 + l[1]}
    if root.Right != nil {s = 1 + r[0]}
    *ans = max(*ans, max(f, s))
    return []int{f, s}
}

func longestZigZag(root *TreeNode) int {
    var ans int = 0
    dfs(root, &ans)
    return ans
}
