// C++
class Solution {
public:
    void dfs(int curr, vector<vector<int>> &adj, vector<bool> &visited, vector<int> &color, int c, int &ans) {
        if(ans != -1) return;
        visited[curr] = true;
        color[curr] = c;
        for(int next: adj[curr]) {
            if(color[next] != -1 && color[next] == c) {
                ans = 0;
                return;
            }
            if(visited[next] == false) {
                dfs(next, adj, visited, color, 1 - c, ans);
            }
        }
    }
    bool isBipartite(vector<vector<int>>& adj) {
        int ans = -1;
        int V = adj.size();
	    vector<bool> visited(V, false);
	    vector<int> color(V, -1);
	    for(int i = 0; i < V; i++) {
	        if(visited[i] == false) {
	            dfs(i, adj, visited, color, 0, ans);
	        }
	    }
	    return -ans;
    }
    
};


// Golang
func dfs(curr int, adj [][]int, visited []bool, color []int, c int, ans *int) {
    if *ans != -1 {return}
    visited[curr] = true
    color[curr] = c
    for _, next := range adj[curr] {
        if color[next] != -1 && color[next] == c {
            *ans = 0
            return
        }
        if visited[next] == false {
            dfs(next, adj, visited, color, 1 - c, ans)
        }
    }
}

func isBipartite(adj [][]int) bool {
    ans := -1
    V := len(adj)
    visited := make([]bool, V)
    color := make([]int, V) 
    for i := 0; i < V; i++ {color[i] = -1}
    for i := 0; i < V; i++ {
        if visited[i] == false {
            dfs(i, adj, visited, color, 0, &ans)
        }
    }
    return ans == -1
}
