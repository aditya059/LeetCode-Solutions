// TC = O(mn^2) | SC = O(1)
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& grid) {
        const int MAX = 1e7;
        int m = grid.size();
        int n = grid[0].size();
        for(int i = 1; i < m; i++) {
            for(int j = 0; j < n; j++) {
                int minimum = MAX;
                for(int k = 0; k < n; k++) {
                    if(k != j)
                        minimum = min(minimum, grid[i - 1][k]);
                }
                grid[i][j] += minimum;
            }
        }
        int ans = MAX;
        for(int i = 0; i < n; i++) {
            ans = min(ans, grid[m - 1][i]);
        }
        return ans;
    }
};

OR

// TC = O(mn) | SC = O(1)
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& grid) {
        int mini = INT_MAX, secMin = INT_MAX;
        for(int i = 0; i < grid.size(); i++) {
            int nextMini = INT_MAX, nextSecMin = INT_MAX;
            for(int j = 0; j < grid[0].size(); j++) {
                if(i) 
                    grid[i][j] += grid[i - 1][j] == mini? secMin: mini;
                if(grid[i][j] < nextMini) {
                    nextSecMin = nextMini;
                    nextMini = grid[i][j];
                } else {
                    nextSecMin = min(grid[i][j], nextSecMin);
                }
            }
            mini = nextMini;
            secMin = nextSecMin;
        }
        return mini;
    }
};
