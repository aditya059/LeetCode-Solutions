class Solution {
public:
    void solve(vector<vector<int>> &ans, vector<int> &nums, int i, vector<int> temp) {
        if(i == nums.size()) {
            ans.push_back(temp);
            return;
        }
        solve(ans, nums, i + 1, temp);
        temp.push_back(nums[i]);
        solve(ans, nums, i + 1, temp);
        temp.pop_back();
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> ans, result;
        vector<int> temp;
        sort(nums.begin(), nums.end());
        solve(ans, nums, 0, temp);
        sort(ans.begin(), ans.end());
        for(int i = 0; i < ans.size(); i++) {
            if(result.empty() || ans[i] != result.back())
                result.push_back(ans[i]);
        }
        return result;
    }
};

OR

class Solution {
public:
    void solve(vector<vector<int>> &ans, vector<int> &nums, int index, vector<int> &temp) {
        ans.push_back(temp);
        for(int i = index; i < nums.size(); i++) {
            if(i != index && nums[i] == nums[i - 1]) continue;
            temp.push_back(nums[i]);
            solve(ans, nums, i + 1, temp);
            temp.pop_back();
        }
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> temp;
        sort(nums.begin(), nums.end());
        solve(ans, nums, 0, temp);
        return ans;
    }
};
