//------------------------------------------
// C++
//------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    int pairSum(ListNode* head) {
        ListNode *slow = head, *fast = head;
        while(fast && fast -> next && fast -> next -> next) {
            fast = fast -> next -> next;
            slow = slow -> next;
        }
        ListNode *p = slow -> next, *q = nullptr, *r = nullptr;
        slow -> next = nullptr;
        while(p) {
            r = q;
            q = p;
            p = p -> next;
            q -> next = r;
        } 
        int ans = 0;
        while(head) {
            ans = max(ans, head -> val + q -> val);
            head = head -> next;
            q = q -> next;
        }
        return ans;
    }
};


//------------------------------------------
// Golang
//------------------------------------------
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func max(a, b int) int {
    if a > b { 
        return a
    }
    return b
}

func pairSum(head *ListNode) int {
    slow := head
    fast := head
    for fast != nil && fast.Next != nil && fast.Next.Next != nil {
        fast = fast.Next.Next
        slow = slow.Next
    }
    p := slow.Next
    var q *ListNode = nil
    var r *ListNode = nil
    slow.Next = nil
    for p != nil {
        r = q
        q = p
        p = p.Next
        q.Next = r
    } 
    var ans int = 0
    for head != nil {
        ans = max(ans, head.Val + q.Val)
        head = head.Next
        q = q.Next
    }
    return ans
}
