class Solution {
public:
    int numFactoredBinaryTrees(vector<int>& arr) {
        sort(arr.begin(), arr.end());
        const int MOD = 1e9 + 7;
        map<int, int> Map;
        for(int i = 0; i < arr.size(); i++) {
            Map[arr[i]] = i;
        }
        vector<int> DP(arr.size(), 1);
        for(int i = 1; i < arr.size(); i++) {
            for(int j = 0; j < i; j++) {
                if(arr[i] % arr[j] == 0 && Map.find(arr[i] / arr[j]) != Map.end())
                    DP[i] = (DP[i] + ((long)DP[j] * (long)DP[Map[arr[i] / arr[j]]]) % MOD) % MOD;
            }
        }
        int ans = 0;
        for(int i = 0; i < arr.size(); i++) {
            ans = (ans + DP[i]) % MOD;
        }
        return ans;
   }
};
