class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        if(obstacleGrid[0][0] || obstacleGrid[m - 1][n - 1]) return 0;
        vector<vector<int>> DP(m, vector<int>(n, 1));
        for(int i = 1; i < n; i++) 
            DP[0][i] = obstacleGrid[0][i]? 0: DP[0][i - 1];
        for(int i = 1; i < m; i++) 
            DP[i][0] = obstacleGrid[i][0]? 0: DP[i - 1][0];
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                DP[i][j] = obstacleGrid[i][j]? 0: DP[i - 1][j] + DP[i][j - 1];
            }
        }
        return DP[m - 1][n - 1];
    }
};

OR

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        if(obstacleGrid[0][0] || obstacleGrid[m - 1][n - 1]) return 0;
        vector<int> DP(n);
        DP[0] = 1;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(obstacleGrid[i][j])
                    DP[j] = 0;
                else if(j > 0)
                    DP[j] = DP[j] + DP[j - 1];
            }
        }
        return DP[n - 1];
    }
};
