/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<int> dfs(TreeNode* root, int &distance, int &ans) {
        if(!root) return vector<int>(distance + 1, 0);
        vector<int> Left = dfs(root -> left, distance, ans);
        vector<int> Right = dfs(root -> right, distance, ans);
        for(int l = 1; l < distance; l++) {
            for(int r = 1; r <= distance - l; r++) {
                ans += Left[l] * Right[r];
            }
        } 
        for(int i = distance - 1; i >= 0; i--) {
            Left[i + 1] = Left[i] + Right[i];
        }
        Left[1] = !root -> left && !root -> right;
        return Left;
    }
public:
    int countPairs(TreeNode* root, int distance) {
        int ans = 0;
        dfs(root, distance, ans);
        return ans;
    }
};
