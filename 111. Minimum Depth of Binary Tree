// Recursive (DFS)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root == nullptr) return 0;
        int lH = minDepth(root -> left);
        int rH = minDepth(root -> right);
        if(lH == 0) return rH + 1;
        else if(rH == 0) return lH + 1;
        else return 1 + min(lH, rH);
    }
};

// Iterative (BFS)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root == nullptr) return 0;
        queue<TreeNode*> Queue;
        Queue.push(root);
        int level = 0;
        while(!Queue.empty()) {
            level++;
            int sz = Queue.size();
            for(int i = 0; i < sz; i++) {
                TreeNode *curr = Queue.front();
                Queue.pop();
                if(curr -> left == nullptr && curr -> right == nullptr)
                    return level;
                if(curr -> left) 
                    Queue.push(curr -> left);
                if(curr -> right)
                    Queue.push(curr -> right);
            }
        }
        return level;
    }
};
