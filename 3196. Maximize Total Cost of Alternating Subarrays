// SC = O(n)
class Solution {
public:
    long long maximumTotalCost(vector<int>& nums) {
        long long DP[100005][2];
        int n = nums.size();
        DP[0][0] = DP[0][1] = nums[0];
        for(int i = 1; i < nums.size(); i++) {
            DP[i][0] = max(DP[i - 1][0], DP[i - 1][1]) + nums[i];
            DP[i][1] = DP[i - 1][0] - nums[i];
        }
        return max(DP[n - 1][0], DP[n - 1][1]);
    }
};

OR

// SC = O(1)
class Solution {
public:
    long long maximumTotalCost(vector<int>& nums) {
        long long flipped = nums[0], nonFlipped = nums[0];
        for(int i = 1; i < nums.size(); i++) {
            long long temp = nonFlipped;
            nonFlipped = max(nonFlipped, flipped) + nums[i];
            flipped = temp - nums[i];
        }
        return max(flipped, nonFlipped);
    }
};
