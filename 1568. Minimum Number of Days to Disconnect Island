class Solution {
    void dfs(int x, int y, vector<vector<int>> &grid, vector<vector<bool>> &visited) {
        if(x < 0 || y < 0 || x >= grid.size() || y >= grid[0].size() || !grid[x][y] || visited[x][y]) return;
        visited[x][y] = true;
        dfs(x + 1, y, grid, visited);
        dfs(x - 1, y, grid, visited);
        dfs(x, y + 1, grid, visited);
        dfs(x, y - 1, grid, visited);
    }
    bool isConnected(int numOfIslands) {
        return numOfIslands == 1;
    }
    int countIslands(vector<vector<int>>& grid) {
        int numOfIslands = 0;
        vector<vector<bool>> visited(grid.size(), vector<bool>(grid[0].size()));
        for(int i = 0; i < grid.size(); i++) {
            for(int j = 0; j < grid[0].size(); j++) {
                if(grid[i][j] && !visited[i][j]) {
                    numOfIslands++;
                    dfs(i, j , grid, visited);
                }
            }
        }
        return numOfIslands;
    }
public:
    int minDays(vector<vector<int>>& grid) {
        int numOfIslands = countIslands(grid);
        cout << numOfIslands << endl;
        if(!isConnected(numOfIslands)) return 0;
        for(int i = 0; i < grid.size(); i++) {
            for(int j = 0; j < grid[0].size(); j++) {
                if(grid[i][j]) {
                    grid[i][j] = 0;
                    numOfIslands = countIslands(grid);
                    if(!isConnected(numOfIslands)) return 1;
                    grid[i][j] = 1;
                }
            }
        }
        return 2;
    }
};
