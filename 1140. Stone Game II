class Solution {
    int solve(int turn, int i, int M, vector<int>& piles, vector<vector<vector<int>>> &memo) {
        if(i >= piles.size()) return 0;
        if(memo[turn][i][M] != -1) return memo[turn][i][M];
        int ans = turn == 0? INT_MIN: INT_MAX;
        for(int X = 1; X <= 2 * M; X++) {
            if(i + X > piles.size()) continue;
            int score = piles[i + X - 1] - (i > 0? piles[i - 1]: 0);
            if(turn == 0) {
                ans = max(ans, score + solve(1, i + X, max(M, X), piles, memo));
            } else {
                ans = min(ans, solve(0, i + X, max(M, X), piles, memo));
            }
        }
        return memo[turn][i][M] = ans;
    }
public:
    int stoneGameII(vector<int>& piles) {
        for(int i = 1; i < piles.size(); i++) {
            piles[i] += piles[i - 1];
        }
        vector<vector<vector<int>>> memo(2, vector<vector<int>>(101, vector<int>(101, -1)));
        solve(0, 0, 1, piles, memo);
        return memo[0][0][1];
    }
};
