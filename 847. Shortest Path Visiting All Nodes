class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        queue<pair<int, int>> Queue;
        set<pair<int, int>> Set;
        for(int i = 0; i < n; i++) {
            Queue.push({i, 1 << i});
            Set.insert({i, 1 << i});
        }
        int ans = 0, fullSet = (1 << n) - 1;
        while(!Queue.empty()) {
            int sz = Queue.size();
            for(int i = 0; i < sz; i++) {
                pair<int, int> curr = Queue.front();
                Queue.pop();
                if(curr.second == fullSet) return ans;
                for(int next: graph[curr.first]) {
                    int bitMask = curr.second | (1 << next);
                    if(Set.find({next, bitMask}) != Set.end()) continue;
                    Set.insert({next, bitMask});
                    Queue.push({next, bitMask});
                }
            }
            ans++;
        }
        return -1;
    }
};
