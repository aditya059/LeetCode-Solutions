class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> DP(m, vector<int>(n, 1));
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                DP[i][j] = DP[i - 1][j] + DP[i][j - 1];
            }
        }
        return DP[m - 1][n - 1];
    }
};

OR

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> DP(2, vector<int>(n, 1));
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                DP[i & 1][j] = DP[(i - 1) & 1][j] + DP[i & 1][j - 1];
            }
        }
        return DP[(m - 1) % 2][n - 1];
    }
};

OR

class Solution {
public:
    int uniquePaths(int m, int n) {
        long ans = 1;
        m--;
        n--;
        for(int i = m + 1, j = 1; i <= m + n; i++, j++) {
            ans = ans * i / j;
        }
        return (int)ans;
    }
};
