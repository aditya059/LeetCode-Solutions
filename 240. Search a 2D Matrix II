// O(m log n)
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        for(int i = 0; i < matrix.size(); i++) {
            int index = lower_bound(matrix[i].begin(), matrix[i].end(), target) - matrix[i].begin();
            if(index < matrix[i].size() && matrix[i][index] == target)
                return true;
        }
        return false;
    }
};

OR

// O(m log n) optimised
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        for(int i = 0; i < matrix.size(); i++) {
            if(target <= matrix[i][matrix[0].size() - 1]) {
                int index = lower_bound(matrix[i].begin(), matrix[i].end(), target) - matrix[i].begin();
                if(index < matrix[i].size() && matrix[i][index] == target)
                    return true;
            }
        }
        return false;
    }
};
