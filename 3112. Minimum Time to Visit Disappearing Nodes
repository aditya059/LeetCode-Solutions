class Solution {
public:
    vector<int> minimumTime(int n, vector<vector<int>>& edges, vector<int>& disappear) {
        vector<pair<int, int>> adjList[n];
        for(int i = 0; i < edges.size(); i++) {
            adjList[edges[i][0]].push_back({edges[i][1], edges[i][2]});
            adjList[edges[i][1]].push_back({edges[i][0], edges[i][2]});
        }
        vector<int> dist(n, INT_MAX);
        dist[0] = 0;
        set<pair<int, int>> PQ;
        PQ.insert({0, 0});
        while(!PQ.empty()) {
            auto [u, _] = *PQ.begin();
            PQ.erase(PQ.begin());
            for(auto [v, w]: adjList[u]) {
                if(dist[u] + w < min(dist[v], disappear[v])) {
                    PQ.erase({v, dist[v]});
                    dist[v] = dist[u] + w;
                    PQ.insert({v, dist[v]});
                }
            }
        }
        for(int i = 0; i < n; i++) {
            if(dist[i] == INT_MAX) dist[i] = -1;
        }
        return dist;
    }
};
