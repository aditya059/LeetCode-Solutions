/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* compute(vector<int>& preorder, vector<int>& inorder, int left, int right, int &rootIndex) {
        if(left > right) 
            return NULL;
        int p;
        for(p = left; p <= right; p++) {
            if(inorder[p] == preorder[rootIndex]) 
                break;
        }
        TreeNode* node = new TreeNode(inorder[p]);
        rootIndex++;
        node -> left = compute(preorder, inorder, left, p - 1, rootIndex);
        node -> right = compute(preorder, inorder, p + 1, right, rootIndex);
        return node;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int rootIndex = 0;
        return compute(preorder, inorder, 0, inorder.size() - 1, rootIndex);
    }
};

OR

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* compute(vector<int>& preorder, map<int, int>& Map, int left, int right, int &rootIndex) {
        if(left > right) 
            return NULL;
        int p = Map[preorder[rootIndex]];
        TreeNode* node = new TreeNode(preorder[rootIndex]);
        rootIndex++;
        node -> left = compute(preorder, Map, left, p - 1, rootIndex);
        node -> right = compute(preorder, Map, p + 1, right, rootIndex);
        return node;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int rootIndex = 0;
        map<int, int> Map;
        for(int i = 0; i < inorder.size(); i++) {
            Map[inorder[i]] = i;
        }
        return compute(preorder, Map, 0, inorder.size() - 1, rootIndex);
    }
};
