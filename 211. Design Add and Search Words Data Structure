//----------------------------------------------------------------------------------------
// C++
//----------------------------------------------------------------------------------------
class WordDictionary {
public:
    
    typedef struct TrieNode {
        TrieNode *children[26];
        bool endHere = false;
    } TrieNode;
    
    TrieNode *root;
    
    WordDictionary() {
        root = new TrieNode();
    }
    
    void addWord(string word) {
        TrieNode *ptr = root;
        for(int i = 0; i < word.length(); i++) {
            char ch = word[i];
            if(!ptr -> children[ch - 'a']) {
                TrieNode *temp = new TrieNode();
                ptr -> children[ch - 'a'] = temp;
            }
            ptr = ptr -> children[ch - 'a'];
        }
        ptr -> endHere = true;
    }
    
    bool search(string word) {
        return searchWord(0, word, root);
    }
    
    bool searchWord(int i, string &word, TrieNode *root) {
        if(i == word.length())
            return root -> endHere;
        char ch = word[i];
        if(ch != '.') {
            if(root -> children[ch - 'a'])
                return searchWord(i + 1, word, root -> children[ch - 'a']);
            else
                return false;
        }
        for(int j = 0; j < 26; j++) {
            if(root -> children[j] && searchWord(i + 1, word, root -> children[j])) 
                return true;
        }
        return false;
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */


//----------------------------------------------------------------------------------------
// Golang
//----------------------------------------------------------------------------------------
type TrieNode struct {
    children []*TrieNode
    endHere bool
}

type WordDictionary struct {
    root *TrieNode
}


func Constructor() WordDictionary {
    return WordDictionary {
        &TrieNode {
            children: make([]*TrieNode, 26),
            endHere: false,
        },
    }
}


func (this *WordDictionary) AddWord(word string)  {
    ptr := this.root
    for i := 0; i < len(word); i++ {
        ch := word[i]
        if ptr.children[ch - 'a'] == nil {
            ptr.children[ch - 'a'] = &TrieNode {
                children: make([]*TrieNode, 26),
                endHere: false,
            }
        }
        ptr = ptr.children[ch - 'a']
    }
    ptr.endHere = true
}

func searchWord(i int, word string, root *TrieNode) bool {
    if i == len(word) {
        return root.endHere
    }
    ch := word[i]
    if ch != '.' {
        if root.children[ch - 'a'] != nil {
            return searchWord(i + 1, word, root.children[ch - 'a'])
        } else {
            return false
        }
    }
    for j := 0; j < 26; j++ {
        if root.children[j] != nil && searchWord(i + 1, word, root.children[j]) {
            return true
        } 
    }
    return false
}

func (this *WordDictionary) Search(word string) bool {
    return searchWord(0, word, this.root)
}


/**
 * Your WordDictionary object will be instantiated and called as such:
 * obj := Constructor();
 * obj.AddWord(word);
 * param_2 := obj.Search(word);
 */
