// C++
class Solution {
public:
    long long maximumSubsequenceCount(string text, string pattern) {
        int count0 = 0, count1 = 0;
        long long ans = 0;
        for(char ch: text) { 
            if(ch == pattern[0]) {
                count0++;
            } else if(ch == pattern[1]) {
                count1++;
                ans += count0;
            }
        }
        if(pattern[0] == pattern[1]) return count0 * 1L * (count0 + 1) / 2;
        return ans + max(count1, count0);
    }
};


// Golang
func maximumSubsequenceCount(text string, pattern string) int64 {
    var count0, count1 int = 0, 0
    var ans int64 = 0
    for _, ch := range text { 
        if byte(ch) == pattern[0] {
            count0++
        } else if byte(ch) == pattern[1] {
            count1++
            ans += int64(count0)
        }
    }
    if pattern[0] == pattern[1] {return int64(count0) * int64(count0 + 1) / 2}
    if count0 > count1 {
        ans += int64(count0)
    } else {
        ans += int64(count1)
    }
    return ans
}
