class Solution {
    void dfs(int i, int j, vector<vector<int>> &grid, int &count) {
        if(i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size() || grid[i][j] == 0) return;
        count += grid[i][j];
        grid[i][j] = 0;
        dfs(i + 1, j, grid, count);
        dfs(i - 1, j, grid, count);
        dfs(i, j + 1, grid, count);
        dfs(i, j - 1, grid, count);
    }
public:
    int findMaxFish(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int ans = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j]) {
                    int count = 0;
                    dfs(i, j, grid, count);
                    ans = max(ans, count);
                }
            }
        }
        return ans;
    }
};
