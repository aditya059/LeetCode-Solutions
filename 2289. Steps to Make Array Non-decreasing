// C++
class Solution {
public:
    int totalSteps(vector<int>& nums) {
        int n = nums.size();
        vector<int> DP(n, 0);
        stack<int> Stack;
        int ans = 0;
        for(int i = nums.size() - 1; i >= 0; i--) {
            while(!Stack.empty() && nums[Stack.top()] < nums[i]) {
                DP[i] = max(DP[Stack.top()], DP[i] + 1);
                Stack.pop();
            }
            ans = max(ans, DP[i]);
            Stack.push(i);
        }
        return ans;
    }
};

OR

// Simulation
class Solution {
public:
    int totalSteps(vector<int>& nums) {
        map<int, int> Map;
        vector<pair<int, int>> remove;
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            Map[i] = nums[i];
            if(i < n - 1 && nums[i] > nums[i + 1]) remove.push_back({i, i + 1});
        }
        int ans = 0;
        while(!remove.empty()) {
            ans++;
            vector<pair<int, int>> nextRemove;
            for(auto [i, j]: remove) Map.erase(j);
            for(auto [i, j]: remove) {
                auto currIter = Map.find(i);
                if(currIter == Map.end() || next(currIter) == Map.end()) continue;
                auto nextIter = next(currIter);
                if(nextIter -> second < currIter -> second) {
                    nextRemove.push_back({i, nextIter -> first});
                }
            }
            remove = nextRemove;
        }
        return ans;
    }
};

//--------------------------------------------------------------------------

// Golang
func max(a, b int) int {
    if a > b {return a}
    return b
}

func totalSteps(nums []int) int {
    n := len(nums)
    DP := make([]int, n)
    Stack := make([]int, 1e5)
    top := -1
    ans := 0
    for i := n - 1; i >= 0; i-- {
        for top != -1 && nums[Stack[top]] < nums[i] {
            DP[i] = max(DP[Stack[top]], DP[i] + 1)
            top--
        }
        ans = max(ans, DP[i])
        top++
        Stack[top] = i
    }
    return ans
}
