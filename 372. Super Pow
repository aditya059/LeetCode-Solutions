class Solution {
public:
    void divide(vector<int>& b, int &j) {
        int remainder = 0;
        for(int i = j; i < b.size(); i++) {
            int num = (remainder * 10 + b[i]);
            remainder = num % 2;
            b[i] = num / 2;
        }
        while(b[j] == 0) j++;
    }
    int solve(int &a, vector<int>& b, int &j) {
        if(j == b.size() - 1) {
            if(b.back() == 0) return 1;
            if(b.back() == 1) return a;
        }
        bool isEven = (b.back() % 2 == 0);
        divide(b, j);
        int y = solve(a, b, j);
        if(isEven) {
            return (y * y) % 1337;
        }
        else {
            return (((y * y) % 1337) * a) % 1337;
        }
    }
    int superPow(int a, vector<int>& b) {
        a = a % 1337;
        int j = 0;
        return solve(a, b, j);
    }
};

OR

class Solution {
public:
    const int MOD = 1337;
    int powMod(int a, int x) {
        a = a % MOD;
        int ans = 1;
        for(int i = 0; i < x; i++) {
            ans = (ans * a) % MOD;
        }
        return ans;
    }
    int superPow(int a, vector<int>& b) {
        if(b.empty()) return 1;
        int lastDigit = b.back();
        b.pop_back();
        return (powMod(superPow(a, b), 10) * powMod(a, lastDigit)) % MOD;
    }
};

OR

class Solution {
public:
    const int MOD = 1337;
    int powMod(int a, int b) {
        if(b == 0) return 1;
        if(b == 1) return a;
        int y = powMod(a, b / 2);
        if(b % 2 == 0) {
            return (y * y) % MOD;
        }
        else {
            return (((y * y) % MOD) * a) % MOD;
        }
    }
    int superPow(int a, vector<int>& b) {
        a %= MOD;
        if(b.empty()) return 1;
        int lastDigit = b.back();
        b.pop_back();
        return (powMod(superPow(a, b), 10) * powMod(a, lastDigit)) % MOD;
    }
};
