class Solution {
public:
    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {
        map<int, int> Map;
        vector<int> ans;
        for(int num: arr1) {
            Map[num]++;
        }
        for(int i = 0; i < arr2.size(); i++) {
            while(Map[arr2[i]]) {
                ans.push_back(arr2[i]);
                Map[arr2[i]]--;
            }
        }
        for(auto iter: Map) {
            while(iter.second) {
                ans.push_back(iter.first);
                iter.second--;
            }
        }
        return ans;
    }
};

OR

class Solution {
public:
    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {
        unordered_map<int, int> Map;
        for(int i = 0; i < arr1.size(); i++) Map[arr1[i]] = INT_MAX;
        for(int i = 0; i < arr2.size(); i++) Map[arr2[i]] = i;
        sort(arr1.begin(), arr1.end(), [&](int &A, int &B) {
            return Map[A] < Map[B];
        });
        int i;
        for(i = arr1.size() - 1; i >= 0; i--) {
            if(Map[arr1[i]] != INT_MAX) break;
        }
        sort(arr1.begin() + i + 1, arr1.end());
        return arr1;
    }
};
