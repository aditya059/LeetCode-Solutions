// C++
class Solution {
public:
    void dfs(int curr, vector<int> adjList[], int &ans, vector<int> &informTime, int propTime) {
        ans = max(ans, propTime);
        for(int next: adjList[curr]) {
            dfs(next, adjList, ans, informTime, propTime + informTime[curr]);
        }
    }
    int numOfMinutes(int n, int headID, vector<int>& manager, vector<int>& informTime) {
        int ans = INT_MIN;
        vector<int> adjList[n];
        for(int i = 0; i < manager.size(); i++) {
            if(manager[i] != -1)
                adjList[manager[i]].push_back(i);
        }
        dfs(headID, adjList, ans, informTime, 0);
        return ans;
    }
};


// Golang
func dfs(curr int, adjList [][]int, ans *int, informTime []int, propTime int) {
    if propTime > *ans {
        *ans = propTime
    }
    for _, next := range adjList[curr] {
        dfs(next, adjList, ans, informTime, propTime + informTime[curr])
    }
}

func numOfMinutes(n int, headID int, manager []int, informTime []int) int {
    var ans int = math.MinInt
    adjList := make([][]int, n)
    for i := 0; i < len(manager); i++ {
        if manager[i] != -1 {
            adjList[manager[i]] = append(adjList[manager[i]], i)
        }
    }
    dfs(headID, adjList, &ans, informTime, 0)
    return ans
}
