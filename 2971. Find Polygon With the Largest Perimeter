// Sorting - O(nlog n)
class Solution {
public:
    long long largestPerimeter(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        long long currSum = 0, ans = -1;
        for(int i = 0; i < nums.size() - 1; i++) {
            currSum += nums[i];
            if(currSum > nums[i + 1])
                ans = currSum + nums[i + 1];
        }
        return ans;
    }
};

OR

// Sorting - O(nlog n)
class Solution {
public:
    long long largestPerimeter(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        long long currSum = 0, ans = -1;
        for(int i = 0; i < nums.size(); i++) {
            currSum += nums[i];
            if(currSum > 2 * nums[i])
                ans = currSum;
        }
        return ans;
    }
};

OR

// Priority Queue - O(n + k log n)
class Solution {
public:
    long long largestPerimeter(vector<int>& nums) {
        priority_queue<int> PQ(nums.begin(), nums.end());
        long long currSum = accumulate(nums.begin(), nums.end(), 0L);
        while(PQ.size() > 2) {
            if(currSum > (PQ.top() << 1))
                return currSum;
            currSum -= PQ.top();
            PQ.pop();
        }
        return -1;
    }
};
