// C++
class Solution {
public:
    void dfs(int curr, vector<char> &color, vector<vector<int>>& graph, vector<bool> &notSafe) {
        color[curr] = 'G';
        for(int next: graph[curr]) {
            if(color[next] == 'W')
                dfs(next, color, graph, notSafe);
            if(color[next] == 'G')
                notSafe[next] = true;
            notSafe[curr] = notSafe[curr] or notSafe[next];
        } 
        color[curr] = 'B';
    }
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        vector<char> color(graph.size(), 'W');
        vector<bool> notSafe(graph.size(), false);
        vector<int> ans;
        for(int i = 0; i < graph.size(); i++) {
            if(color[i] == 'W')
                dfs(i, color, graph, notSafe);
        }
        for(int i = 0; i < graph.size(); i++) {
            if(!notSafe[i])
                ans.push_back(i);
        }
        return ans;
    }
};

OR

class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n = graph.size();
        queue<int> Queue;
        vector<int> indegree(n);
        vector<vector<int>> adjList(n);
        for(int i = 0; i < n; i++) {
            if(graph[i].size() == 0) Queue.push(i);
            for(int j: graph[i]) {
                adjList[j].push_back(i);
                indegree[i]++;
            }
        }
        vector<bool> safe(n);
        while(!Queue.empty()) {
            int curr = Queue.front();
            Queue.pop();
            safe[curr] = true;
            for(int next: adjList[curr]) {
                indegree[next]--;
                if(indegree[next] == 0) Queue.push(next);
            }
        }
        vector<int> ans;
        for(int i = 0; i < n; i++) {
            if(safe[i]) ans.push_back(i);
        }
        return ans;
    }
};

//----------------------------------------------------------------------

// Golang
func dfs(curr int, color []byte, graph [][]int, notSafe []bool) {
    color[curr] = 'G'
    for _, next := range graph[curr] {
        if color[next] == 'W' {
            dfs(next, color, graph, notSafe)
        } else if(color[next] == 'G') {
            notSafe[next] = true
        }
        notSafe[curr] = notSafe[curr] || notSafe[next]
    } 
    color[curr] = 'B'
}

func eventualSafeNodes(graph [][]int) []int {
    n := len(graph)
    color := make([]byte, n)
    for i := 0; i < n; i++ {color[i] = 'W'}
    notSafe := make([]bool, n)
    ans := []int{}
    for i := 0; i < n; i++ {
        if color[i] == 'W' {
            dfs(i, color, graph, notSafe)
        }
    }
    for i := 0; i < n; i++ {
        if !notSafe[i] {
            ans = append(ans, i)
        }
    }
    return ans
}
