class Solution {
    struct comp {
        bool operator()(const pair<double, int> &A, const pair<double, int> &B) const {
            return A.first > B.first;
        }
    };
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        vector<pair<int, double>> adjList[n];
        for(int i = 0; i < edges.size(); i++) {
            adjList[edges[i][0]].push_back({edges[i][1], succProb[i]});
            adjList[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        multiset<pair<double, int>, comp> PQ;
        PQ.insert({1.0, start});
        vector<double> probability(n, INT_MIN);
        probability[start] = 1.0;
        while(!PQ.empty()) {
            pair<double, int> curr = *PQ.begin();
            PQ.erase(PQ.begin());
            int u = curr.second;
            for(auto &[v, w]: adjList[u]) {
                if(probability[u] * w > probability[v]) {
                    PQ.erase({probability[v], v});
                    probability[v] = probability[u] * w;
                    PQ.insert({probability[v], v});
                }
            }
        }
        return probability[end] == INT_MIN? 0: probability[end];
    }
};
