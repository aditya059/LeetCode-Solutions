// C++
class Solution {
    static bool comp(int &A, int &B) {
        return (A & 1) < (B & 1) || ((A & 1) == (B & 1) && A < B); 
    }
public:
    long long makeSimilar(vector<int>& nums, vector<int>& target) {
        sort(nums.begin(), nums.end(), comp);
        sort(target.begin(), target.end(), comp);
        long long count = 0;
        for(int i = 0; i < nums.size(); i++) {
            count += abs(nums[i] - target[i]); 
        }
        return count >> 2;
    }
};

//------------------------------------------------

// Golang
func abs(a int) int {
    if a < 0 {return -a}
    return a
}

func makeSimilar(nums []int, target []int) int64 {
    sort.Slice(nums, func(i, j int) bool {
        return nums[i] % 2 < nums[j] % 2 || (nums[i] % 2 == nums[j] % 2 && nums[i] < nums[j])
    })
    sort.Slice(target, func(i, j int) bool {
        return target[i] % 2 < target[j] % 2 || (target[i] % 2 == target[j] % 2 && target[i] < target[j])
    })
    var count int64 = 0
    for i := 0; i < len(nums); i++ {
        count += int64(abs(nums[i] - target[i])) 
    }
    return count >> 2
}
