// 1. Prefix & Suffix Array
class Solution {
public:
    vector<long long> distance(vector<int>& nums) {
        int n = nums.size();
        vector<long long> prefix(n);
        vector<long long> suffix(n);
        unordered_map<int, int> count;
        unordered_map<int, int> lastPos;
        for(int i = 0; i < n; i++) {
            prefix[i] = prefix[lastPos[nums[i]]] + count[nums[i]] * (i - lastPos[nums[i]]);
            lastPos[nums[i]] = i;
            count[nums[i]]++;
        }
        count.clear();
        lastPos.clear();
        for(int i = n - 1; i >= 0; i--) {
            suffix[i] = suffix[lastPos[nums[i]]] + count[nums[i]] * (lastPos[nums[i]] - i);
            lastPos[nums[i]] = i;
            count[nums[i]]++;
            prefix[i] = prefix[i] + suffix[i];
        }
        return prefix;
    }
};


// 2. Prefix Sum
class Solution {
public:
    vector<long long> distance(vector<int>& nums) {
        unordered_map<int, vector<int>> index;
        for(int i = 0; i < nums.size(); i++) {
            index[nums[i]].push_back(i);
        }
        vector<long long> ans(nums.size());
        for(auto iter: index) {
            int n = iter.second.size();
            long long sum = 0;
            for(int i = 1; i < n; i++) sum += iter.second[i] - iter.second[0];
            ans[iter.second[0]] = sum;
            for(int i = 1; i < n; i++) {
                sum -= (n - 2 * i) * (iter.second[i] - iter.second[i - 1]);
                ans[iter.second[i]] = sum; 
            }
        }
        return ans;
    }
};
