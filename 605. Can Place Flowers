// C++
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int m = flowerbed.size();
        int total = 0;
        for(int i = 0; i < flowerbed.size(); i++) {
            if(!flowerbed[i]) {
                if((i == 0 || !flowerbed[i - 1]) && (i == m - 1 || !flowerbed[i + 1])) {
                    total++;
                    flowerbed[i] = 1;
                }
            }
        }
        return total >= n;
    }
};


// Golang
func canPlaceFlowers(flowerbed []int, n int) bool {
    m := len(flowerbed)
    total := 0
    for i := 0; i < m; i++ {
        if flowerbed[i] == 0 {
            if (i == 0 || flowerbed[i - 1] == 0) && (i == m - 1 || flowerbed[i + 1] == 0) {
                total++
                flowerbed[i] = 1
            }
        }
    }
    return total >= n
}
