class Solution {
    void update(int i, int val, vector<int> &BIT) {
        while(i < BIT.size()) {
            BIT[i] += val;
            i += i & -i;
        }
    }
    int query(int i, vector<int> &BIT) {
        int sum = 0;
        while(i > 0) {
            sum += BIT[i];
            i -= i & -i;
        }
        return sum;
    }
public:
    vector<int> processQueries(vector<int>& queries, int m) {
        int q = queries.size();
        int n = q + m;
        vector<int> BIT(n + 1);
        unordered_map<int, int> vPos;
        for(int i = 1; i <= m; i++) {
            update(q + i, 1, BIT);
            vPos[i] = q + i;
        }
        vector<int> ans(q);
        for(int i = 0; i < q; i++) {
            ans[i] = query(vPos[queries[i]], BIT) - 1;
            update(vPos[queries[i]], -1, BIT);
            update(q - i, 1, BIT);
            vPos[queries[i]] = q - i;
        }
        return ans;
    }
};
