/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string solve(TreeNode* root) {
        if(root == NULL)
            return "";
        if(root -> left == NULL && root -> right == NULL)
            return "(" + to_string(root -> val) + ")";
        string l = solve(root -> left);
        string r = solve(root -> right);
        if(l == "")
            return "(" + to_string(root -> val) + "()" + r + ")"; 
        else
            return "(" + to_string(root -> val) + l + r + ")"; 
    }
    string tree2str(TreeNode* root) {
        string ans = solve(root);
        return ans.substr(1, ans.length() - 2);
    }
};

OR

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string tree2str(TreeNode* root) {
        if(root == NULL)
            return "";
        if(root -> left == NULL && root -> right == NULL)
            return to_string(root -> val);
        if(root -> right == NULL)
            return to_string(root -> val) + "(" + tree2str(root -> left) + ")"; 
        else
            return to_string(root -> val) + "(" + tree2str(root -> left) + ")(" + tree2str(root -> right) + ")"; 
    }
};
