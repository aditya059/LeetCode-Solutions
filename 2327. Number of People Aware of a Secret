// O(n^2)
class Solution {
    const int MOD = 1e9 + 7;
public:
    int peopleAwareOfSecret(int n, int delay, int forget) {
        vector<int> DP(n + 1);
        DP[1] = 1;
        for(int i = 2; i <= n; i++) {
            for(int j = i - forget; j >= 0; j--) {
                DP[j] = 0;
            }
            for(int j = i - delay; j >= 0; j--) {
                DP[i] = (DP[i] + DP[j]) % MOD;
            }
        }
        int ans = 0;
        for(int i = 1; i <= n; i++) {
            ans = (ans + DP[i]) % MOD; 
        }
        return ans;
    }
};

// O(n ^ 2)
class Solution {
    const int MOD = 1e9 + 7;
public:
    int peopleAwareOfSecret(int n, int delay, int forget) {
        vector<int> DP(n + 1);
        DP[1] = 1;
        for(int i = 2; i <= n; i++) {
            for(int j = max(1, i - forget + 1); j <= min(i - delay, n); j++) {
                DP[i] = (DP[i] + DP[j]) % MOD;
            }
        }
        int ans = 0;
        for(int i = max(1, n - forget + 1); i <= n; i++) {
            ans = (ans + DP[i]) % MOD; 
        }
        return ans;
    }
};

// O(n)
class Solution {
    const int MOD = 1e9 + 7;
    int addModulo(int num1, int num2) {
        return ((num1 + MOD) % MOD + (num2 + MOD) % MOD) % MOD;
    }
public:
    int peopleAwareOfSecret(int n, int delay, int forget) {
        vector<int> DP(n + 1);
        DP[1] = 1;
        for(int i = 2; i <= n; i++) {
            int a = (i >= delay? DP[i - delay]: 0);
            int b = (i >= forget? DP[i - forget]: 0);
            int val = addModulo(a, -b);
            DP[i] = addModulo(DP[i - 1], val);
        }
        return addModulo(DP[n], - DP[n - forget]);
    }
};
