class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size(), maxRight = 0, ans = 0;
        vector<int> maxRights(n);
        for(int i = n - 1; i >= 0; i--) {
            maxRights[i] = maxRight;
            maxRight = max(height[i], maxRight);
        }
        int maxleft = 0;
        for(int i = 0; i < n; i++) {
            ans += max(0, min(maxleft, maxRights[i]) - height[i]); 
            maxleft = max(height[i], maxleft);
        }
        return ans;
    }
};


OR


// Two Pointers
class Solution {
public:
    int trap(vector<int>& height) {
        int ans = 0, leftMax = 0, rightMax = 0;
        for(int i = 0, j = height.size() - 1; i <= j;) {
            if(height[i] <= height[j]) {
                if(height[i] >= leftMax) leftMax = height[i];
                else ans += leftMax - height[i];
                i++;
            } else {
                if(height[j] >= rightMax) rightMax = height[j];
                else ans += rightMax - height[j];
                j--;
            }
        }
        return ans;
    }
};

OR

class Solution {
public:
    int trap(vector<int>& height) {
        int ans = 0, leftMax = 0, rightMax = 0;
        for(int i = 0, j = height.size() - 1; i <= j;) {
            if(height[i] <= height[j]) {
                ans += max(0, leftMax - height[i]);
                leftMax = max(leftMax, height[i]);
                i++;
            } else {
                ans += max(0, rightMax - height[j]);
                rightMax = max(rightMax, height[j]);
                j--;
            }
        }
        return ans;
    }
};
