class SmallestInfiniteSet {
    set<int> Set;
public:
    SmallestInfiniteSet() {
        for(int i = 1; i <= 1000; i++) {
            Set.insert(i);
        }
    }
    
    int popSmallest() {
        int item = *Set.begin();
        Set.erase(Set.begin());
        return item;
    }
    
    void addBack(int num) {
        Set.insert(num);
    }
};

/**
 * Your SmallestInfiniteSet object will be instantiated and called as such:
 * SmallestInfiniteSet* obj = new SmallestInfiniteSet();
 * int param_1 = obj->popSmallest();
 * obj->addBack(num);
 */

//----------------------------------------------------

class SmallestInfiniteSet {
    set<int> Set;
    int small;
public:
    SmallestInfiniteSet() {
        small = 1;
    }
    
    int popSmallest() {
        int item;
        if(Set.size() && *Set.begin() < small) {
            item = *Set.begin();
            Set.erase(Set.begin());
        }
        else {
            item = small;
            small++;
        } 
        return item;
    }
    
    void addBack(int num) {
        if(num < small && Set.find(num) == Set.end())
            Set.insert(num);
    }
};

/**
 * Your SmallestInfiniteSet object will be instantiated and called as such:
 * SmallestInfiniteSet* obj = new SmallestInfiniteSet();
 * int param_1 = obj->popSmallest();
 * obj->addBack(num);
 */
