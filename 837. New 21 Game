// C++
// TC = O(n * maxPts) - TLE
class Solution {
public:
    double new21Game(int n, int k, int maxPts) {
        vector<double> DP(n + 1);
        DP[0] = 1;
        for(int i = 1; i <= n; i++) {
            for(int j = max(0, i - maxPts); j < min(i, k); j++) {
                DP[i] += DP[j] / maxPts;
            }
        }
        return accumulate(DP.begin() + k, DP.end(), 0.0);
    }
};


// TC = O(n) - Working
class Solution {
public:
    double new21Game(int n, int k, int maxPts) {
        vector<double> DP(n + 1);
        DP[0] = 1;
        double winSum = k > 0? 1: 0;
        for(int i = 1; i <= n; i++) {
            DP[i] += winSum / maxPts;
            winSum += i < k? DP[i]: 0;
            winSum -= i >= maxPts && i - maxPts < k? DP[i - maxPts]: 0;
        }
        return accumulate(DP.begin() + k, DP.end(), 0.0);
    }
};


// Golang
func new21Game(n int, k int, maxPts int) float64 {
    DP := make([]float64, n + 1)
    DP[0] = 1
    winSum := 0.0
    if k > 0 {
        winSum = 1
    }
    ans := 0.0
    for i := 1; i <= n; i++ {
        DP[i] += winSum / float64(maxPts)
        if i < k {
            winSum += DP[i]
        }
        if i >= maxPts && i - maxPts < k {
            winSum -= DP[i - maxPts]
        }
    }
    for i := k; i <= n; i++ {
        ans += DP[i]
    }
    return ans
}
