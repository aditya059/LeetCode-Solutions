class Solution {
public:
    vector<long long> minOperations(vector<int>& nums, vector<int>& queries) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<long long> prefixSum(n + 1, 0);
        prefixSum[0] = 0;
        for(int i = 1; i <= n; i++) {
            prefixSum[i] = prefixSum[i - 1] + nums[i - 1];
        }
        vector<long long> ans(queries.size());
        for(int i = 0; i < queries.size(); i++) {
            auto iter = upper_bound(nums.begin(), nums.end(), queries[i]);
            int count1 = (iter - nums.begin());
            int count2 = n - count1;
            ans[i] = abs(count1 * 1L * queries[i] - prefixSum[count1]) + abs(count2 * 1L * queries[i] - (prefixSum[n] - prefixSum[count1]));
        }
        return ans;
    }
};
