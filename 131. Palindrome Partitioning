class Solution {
    bool isPalindrome(string &s) {
        for(int i = 0, j = s.length() - 1; i < j; i++, j--) {
            if(s[i] != s[j]) return false;
        }
        return true;
    }
    void solve(int curr, string &s, vector<vector<string>> &ans, vector<string> &palinPartition) {
        if(curr == s.length()) {
            ans.push_back(palinPartition);
            return;
        }
        for(int len = 1; curr + len <= s.length(); len++) {
            string substring = s.substr(curr, len);
            if(isPalindrome(substring)) {
                palinPartition.push_back(substring);
                solve(curr + len, s, ans, palinPartition);
                palinPartition.pop_back();
            }
        }
    }
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> palinPartition;
        solve(0, s, ans, palinPartition);
        return ans;
    }
};
