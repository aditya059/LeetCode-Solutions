class Solution {
public:
    bool isPalindrome(string &s) {
        int i = 0;
        int j = s.length() - 1;
        while(i < j) {
            if(s[i] != s[j]) return false; 
            i++;
            j--;
        } 
        return true;
    }
    void dfs(vector<vector<string>> &ans, vector<string> &temp, string &s, int index) {
        if(index == s.length()) {
            ans.push_back(temp);
            return;
        }
        for(int i = 1; index + i <= s.length(); i++) {
            string t = s.substr(index, i);
            if(isPalindrome(t)) {
                temp.push_back(t);
                dfs(ans, temp, s, index + i);
                temp.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> temp;
        dfs(ans, temp, s, 0);
        return ans;
    }
};
