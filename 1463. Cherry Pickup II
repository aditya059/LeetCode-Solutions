class Solution {
    int dfs(vector<vector<int>>& grid, int row, int col1, int col2, vector<vector<vector<int>>> &memo) {
        int m = grid.size(), n = grid[0].size();
        if(row < 0 || row >= m || col1 < 0 || col1 >= n || col2 < 0 || col2 >= n) return 0;
        if(memo[row][col1][col2] != -1) return memo[row][col1][col2];
        int ans = 0;
        for(int i = -1; i <= 1; i++) {
            for(int j = -1; j <= 1; j++) {
                ans = max(ans, dfs(grid, row + 1, col1 + i, col2 + j, memo));
            }
        }
        ans += col1 == col2? grid[row][col1]: grid[row][col1] + grid[row][col2]; 
        return memo[row][col1][col2] = memo[row][col2][col1] = ans;
    }
public:
    int cherryPickup(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<vector<int>>> memo(m + 1, vector<vector<int>>(n + 1, vector<int>(n + 1, -1)));
        return dfs(grid, 0, 0, n - 1, memo);
    }
};
