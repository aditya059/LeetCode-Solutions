/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* recoverFromPreorder(string traversal) {
        int n = traversal.length();
        stack<TreeNode*> Stack; 
        for(int i = 0; i < n;) {
            int dash = 0;
            while(i < n && traversal[i] == '-') {
                dash++, i++;
            }
            int num = 0;
            while(i < n && traversal[i] != '-') {
                num = num * 10 + (traversal[i++] - '0');
            }

            while(Stack.size() > dash) Stack.pop();
            
            TreeNode* newNode = new TreeNode(num);
            if(!Stack.empty()) {
                if(Stack.top() -> left == nullptr)
                    Stack.top() -> left = newNode;
                else
                    Stack.top() -> right = newNode;
            } 
            Stack.push(newNode);
        }
        while(Stack.size() > 1) Stack.pop();
        return Stack.top();
    }
};
