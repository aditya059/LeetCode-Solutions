// BFS
class Solution {
public:
    bool canTraverseAllPairs(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return true;
        unordered_map<int, int> seen;
        vector<int> adjList[n];
        for(int i = 0; i < n; i++) {
            if(nums[i] == 1) return false;
            for(int p = 2; p * p <= nums[i]; p++) {
                if(nums[i] % p == 0) {
                    if(seen.find(p) != seen.end()) {
                        adjList[seen[p]].push_back(i);
                        adjList[i].push_back(seen[p]);
                    } else {
                        seen[p] = i;
                    }
                    while(nums[i] % p == 0) nums[i] /= p;
                }
            }
            if(nums[i] > 1) {
                if(seen.find(nums[i]) != seen.end()) {
                    adjList[seen[nums[i]]].push_back(i);
                    adjList[i].push_back(seen[nums[i]]);
                } else {
                    seen[nums[i]] = i;
                }
            }
        }
        vector<bool> visited(n);
        queue<int> Queue;
        Queue.push(0);
        visited[0] = true;
        while(!Queue.empty()) {
            int sz = Queue.size();
            for(int i = 0; i < sz; i++) {
                int curr = Queue.front();
                Queue.pop();
                for(int next: adjList[curr]) {
                    if(!visited[next]) {
                        visited[next] = true;
                        Queue.push(next);
                    }
                }
            }
        }
        return count(visited.begin(), visited.end(), true) == n;
    }
};

OR

// DFS
class Solution {
    void dfs(int curr, vector<bool> &visited, vector<int> adjList[]) {
        if(visited[curr]) return;
        visited[curr] = true;
        for(int next: adjList[curr]) {
            dfs(next, visited, adjList);
        }
    }
public:
    bool canTraverseAllPairs(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return true;
        unordered_map<int, int> seen;
        vector<int> adjList[n];
        for(int i = 0; i < n; i++) {
            if(nums[i] == 1) return false;
            for(int p = 2; p * p <= nums[i]; p++) {
                if(nums[i] % p == 0) {
                    if(seen.find(p) != seen.end()) {
                        adjList[seen[p]].push_back(i);
                        adjList[i].push_back(seen[p]);
                    } else {
                        seen[p] = i;
                    }
                    while(nums[i] % p == 0) nums[i] /= p;
                }
            }
            if(nums[i] > 1) {
                if(seen.find(nums[i]) != seen.end()) {
                    adjList[seen[nums[i]]].push_back(i);
                    adjList[i].push_back(seen[nums[i]]);
                } else {
                    seen[nums[i]] = i;
                }
            }
        }
        vector<bool> visited(n);
        dfs(0, visited, adjList);
        return count(visited.begin(), visited.end(), true) == n;
    }
};

OR

// Union Find
class Solution {
    int findParent(int u, vector<int> &parent) {
        if(parent[u] == u) return u;
        return parent[u] = findParent(parent[u], parent);
    }
    void unionSet(int u, int v, vector<int> &parent) {
        int parU = findParent(u, parent);
        int parV = findParent(v, parent);
        if(parU == parV) return;
        if(parU < parV) parent[parV] = parU;
        else parent[parU] = parV;
    }
public:
    bool canTraverseAllPairs(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return true;
        unordered_map<int, int> seen;
        vector<int> adjList[n];
        vector<int> parent(n);
        iota(parent.begin(), parent.end(), 0);
        for(int i = 0; i < n; i++) {
            if(nums[i] == 1) return false;
            for(int p = 2; p * p <= nums[i]; p++) {
                if(nums[i] % p == 0) {
                    if(seen.find(p) != seen.end()) {
                        unionSet(seen[p], i, parent);
                    } else {
                        seen[p] = i;
                    }
                    while(nums[i] % p == 0) nums[i] /= p;
                }
            }
            if(nums[i] > 1) {
                if(seen.find(nums[i]) != seen.end()) {
                    unionSet(seen[nums[i]], i, parent);
                } else {
                    seen[nums[i]] = i;
                }
            }
        }
        for(int i = 0; i < n; i++) {
            if(findParent(i, parent) != 0) return false;
        }
        return true;
    }
};
