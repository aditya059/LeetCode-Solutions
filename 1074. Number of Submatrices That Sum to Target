// C++
class Solution {
public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int m = matrix.size(), n = matrix[0].size();
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                int a = i > 0? matrix[i - 1][j]: 0;
                int b = j > 0? matrix[i][j - 1]: 0;
                int c = i > 0 && j > 0? matrix[i - 1][j - 1]: 0;
                matrix[i][j] += a + b - c;
            }
        }
        int ans = 0;
        for(int i = 0; i < m; i++) {
            for(int j = i; j < m; j++) {
                unordered_map<int, int> Map;
                Map[0]++;
                for(int k = 0; k < n; k++) {
                    int sum = matrix[j][k] - (i > 0? matrix[i - 1][k]: 0);
                    ans += Map[sum - target];
                    Map[sum]++; 
                }
            }
        }
        return ans;
    }
};


// Golang
func numSubmatrixSumTarget(matrix [][]int, target int) int {
    var m, n int = len(matrix), len(matrix[0])
    for i := 0; i < m; i++ {
        for j := 0; j < n; j++ {
            var a, b, c int = 0, 0, 0
            if i > 0 {a = matrix[i - 1][j]}
            if j > 0 {b = matrix[i][j - 1]}
            if i > 0 && j > 0 {c = matrix[i - 1][j - 1]}
            matrix[i][j] += a + b - c
        }
    }
    var ans int = 0
    for i := 0; i < m; i++ {
        for j := i; j < m; j++ {
            Map := make(map[int]int)
            Map[0]++
            for k := 0; k < n; k++ {
                sum := matrix[j][k]
                if i > 0 {sum -= matrix[i - 1][k]}
                ans += Map[sum - target]
                Map[sum]++
            }
        }
    }
    return ans
}
