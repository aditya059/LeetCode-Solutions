/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void inorder(TreeNode* root, vector<int> &sortedVals) {
        if(!root) return;
        inorder(root -> left, sortedVals);
        sortedVals.push_back(root -> val);
        inorder(root -> right, sortedVals);
    }
    TreeNode* balance(vector<int> &sortedVals, int low, int high) {
        if(low > high) return nullptr;
        int mid = low + (high - low) / 2;
        TreeNode *root = new TreeNode(sortedVals[mid]);
        root -> left = balance(sortedVals, low, mid - 1);
        root -> right = balance(sortedVals, mid + 1, high);
        return root;
    }
public:
    TreeNode* balanceBST(TreeNode* root) {
        vector<int> sortedVals;
        inorder(root, sortedVals);
        int n = sortedVals.size();
        return balance(sortedVals, 0, n - 1);
    }
};
