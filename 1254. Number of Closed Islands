// C++
class Solution {
public:
    void dfs(int i, int j, vector<vector<int>> &grid, bool &isIsland) {
        if(i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size()) {
            isIsland = false;
            return;
        }
        if(grid[i][j]) return; 
        grid[i][j] = 1;
        dfs(i - 1, j, grid, isIsland);
        dfs(i + 1, j, grid, isIsland);
        dfs(i, j - 1, grid, isIsland);
        dfs(i, j + 1, grid, isIsland);
    }
    int closedIsland(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int ans = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(!grid[i][j]) {
                    bool isIsland = true;
                    dfs(i, j, grid, isIsland);
                    if(isIsland) ans++;
                }
            }
        }
        return ans;
    }
};


// Golang
func dfs(i, j int, grid [][]int, isIsland *bool) {
    if i < 0 || j < 0 || i >= len(grid) || j >= len(grid[0]) {
        *isIsland = false
        return
    }
    if grid[i][j] == 1 {return}
    grid[i][j] = 1
    dfs(i - 1, j, grid, isIsland)
    dfs(i + 1, j, grid, isIsland)
    dfs(i, j - 1, grid, isIsland)
    dfs(i, j + 1, grid, isIsland)
}

func closedIsland(grid [][]int) int {
    var m int = len(grid)
    var n int = len(grid[0])
    var ans int = 0
    for i := 0; i < m; i++ {
        for j := 0; j < n; j++ {
            if grid[i][j] == 0 {
                var isIsland bool = true
                dfs(i, j, grid, &isIsland)
                if isIsland {ans++}
            }
        }
    }
    return ans
}
