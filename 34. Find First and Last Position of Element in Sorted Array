class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans(2, -1);
        auto iter = lower_bound(nums.begin(), nums.end(), target);
        if(iter == nums.end() || *iter != target)
            return ans;
        ans[0] = iter - nums.begin();
        ans[1] = upper_bound(iter + 1, nums.end(), target) - nums.begin() - 1;
        return ans;
    }
};

OR

class Solution {
public:
    int startPosition(vector<int>& nums, int target) {
        int low = 0; 
        int high = nums.size() - 1;
        int ans = nums.size();
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] < target)
                low = mid + 1;
            else if(nums[mid] > target)
                high = mid - 1;
            else {
                ans = min(ans, mid);
                high = mid - 1;
            }
        }
        return ans == nums.size()? -1: ans;
    }
    int endPosition(vector<int>& nums, int target) {
        int low = 0; 
        int high = nums.size() - 1;
        int ans = -1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] < target)
                low = mid + 1;
            else if(nums[mid] > target)
                high = mid - 1;
            else {
                ans = max(ans, mid);
                low = mid + 1;
            }
        }
        return ans;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans(2);
        ans[0] = startPosition(nums, target);
        ans[1] = endPosition(nums, target);
        return ans;
    }
};
