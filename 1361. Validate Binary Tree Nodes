class Solution {
    void dfs(int curr, vector<bool> &visited, vector<int>& leftChild, vector<int>& rightChild, bool &ans) {
        if(curr == -1) return;
        if(visited[curr]) {
            ans = false;
            return;
        }
        visited[curr] = true;
        dfs(leftChild[curr], visited, leftChild, rightChild, ans);
        dfs(rightChild[curr], visited, leftChild, rightChild, ans);
    }
public:
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {
        vector<int> child(n);
        for(int i = 0; i < n; i++) {
            if(leftChild[i] != -1) child[leftChild[i]]++;
            if(rightChild[i] != -1) child[rightChild[i]]++;
        }
        int root = -1;
        for(int i = 0; i < n; i++) {
            if(!child[i]) {
                root = i;
            }
        }
        if(root == -1) return false;
        vector<bool> visited(n);
        bool ans = true;
        dfs(root, visited, leftChild, rightChild, ans);
        for(int i = 0; i < n; i++) if(!visited[i]) return false;
        return ans;
    }
};
