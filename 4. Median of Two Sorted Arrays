class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums2.size() < nums1.size()) return findMedianSortedArrays(nums2, nums1);
        int s = nums1.size() + nums2.size();
        int low = 0;
        int high = nums1.size();
        while(low <= high) {
            int cut1 = low + (high - low) / 2;
            int cut2 = (nums1.size() + nums2.size() + 1) / 2 - cut1;
            int l1 = cut1 > 0? nums1[cut1 - 1]: INT_MIN; 
            int r1 = cut1 < nums1.size()? nums1[cut1]: INT_MAX;
            int l2 = cut2 > 0? nums2[cut2 - 1]: INT_MIN;
            int r2 = cut2 < nums2.size()? nums2[cut2]: INT_MAX;
            if(l1 <= r2 && l2 <= r1) {
                if(s % 2 == 1) {
                    return max(l1, l2);
                }
                else {
                    return (max(l1, l2) + min(r1, r2)) / 2.0;
                }
            }
            else if(l2 > r1) {
                low = cut1 + 1;
            }
            else {
                high = cut1 - 1;
            }
        }
        return 0.0;
    }
};
