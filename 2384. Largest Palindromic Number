// C++
class Solution {
public:
    string largestPalindromic(string num) {
        int freq[10] = {0};
        for(char ch: num) {
            freq[ch - '0']++;
        }
        string prefix = "";
        int centre = -1;
        for(int i = 9; i >= 0; i--) {
            while(freq[i] > 1) {
                prefix += ('0' + i);
                freq[i] -= 2;
            }
            if(freq[i] == 1) centre = max(centre, i);
        }
        string middle = "";
        if(centre != -1) middle = '0' + centre;
        if(prefix[0] == '0') {
            if(centre == -1) return "0";
            return middle;
        }
        return prefix + middle + string(rbegin(prefix), rend(prefix));
    }
};

------------------------------------------------

// Golang
func reverse(s string) string {
    b := []byte(s)
    for i, j := 0, len(s) - 1; i < j; i, j = i + 1, j - 1 {
        b[i], b[j] = b[j], b[i]
    }
    return string(b)
}

func largestPalindromic(num string) string {
    freq := make([]int, 10)
    for _, ch := range num {
        freq[ch - '0']++
    }
    prefix := ""
    centre := -1
    for i := 9; i >= 0; i-- {
        for freq[i] > 1 {
            prefix += string('0' + i)
            freq[i] -= 2
        }
        if freq[i] == 1 && i > centre {
            centre = i
        }
    }
    middle := ""
    if centre != -1 {middle = string('0' + centre)}
    if len(prefix) > 0 && prefix[0] == '0' {
        if centre == -1 {return "0"}
        return middle
    }
    return prefix + middle + reverse(prefix)
}
