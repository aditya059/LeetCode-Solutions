/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class CBTInserter {
    TreeNode* root;
    queue<TreeNode*> Queue;
public:
    CBTInserter(TreeNode* root) {
        this -> root = root;
        Queue.push(root);
        while(!Queue.empty()) {
            TreeNode* curr = Queue.front();
            if(curr -> left) {
                Queue.push(curr -> left);
            } else {
                break;
            }
            if(curr -> right) {
                Queue.push(curr -> right);
                Queue.pop();
            } else {
                break;
            }
        }
    }
    
    int insert(int val) {
        TreeNode* next = new TreeNode(val);
        Queue.push(next);
        TreeNode* curr = Queue.front();
        int parVal = curr -> val;
        if(!curr -> left) {
            curr -> left = next;
        } else {
            curr -> right = next;
            Queue.pop();
        } 
        return parVal;
    }
    
    TreeNode* get_root() {
        return root;
    }
};

/**
 * Your CBTInserter object will be instantiated and called as such:
 * CBTInserter* obj = new CBTInserter(root);
 * int param_1 = obj->insert(val);
 * TreeNode* param_2 = obj->get_root();
 */
