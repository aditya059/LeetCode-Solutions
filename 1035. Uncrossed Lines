// C++
class Solution {
public:
    int maxUncrossedLines(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size(), n = nums2.size();
        vector<vector<int>> DP(2, vector<int>(n + 1)); 
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(nums1[i] == nums2[j]) {
                    DP[(i + 1) % 2][j + 1] = DP[i % 2][j] + 1;
                } else {
                    DP[(i + 1) % 2][j + 1] = max(DP[(i + 1) % 2][j], DP[i % 2][j + 1]);
                }
            }
        }
        return DP[m % 2][n];
    }
};


// Golang
func max(a, b int) int {
    if a > b {return a}
    return b
}

func maxUncrossedLines(nums1 []int, nums2 []int) int {
    var m, n int = len(nums1), len(nums2)
    DP := make([][]int, 2)
    DP[0] = make([]int, n + 1)
    DP[1] = make([]int, n + 1) 
    for i := 0; i < m; i++ {
        for j := 0; j < n; j++ {
            if nums1[i] == nums2[j] {
                DP[(i + 1) % 2][j + 1] = DP[i % 2][j] + 1
            } else {
                DP[(i + 1) % 2][j + 1] = max(DP[(i + 1) % 2][j], DP[i % 2][j + 1])
            }
        }
    }
    return DP[m % 2][n]
}
