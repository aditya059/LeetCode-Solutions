/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int solve(TreeNode* root, map<int, int> &Map, int &maxCount) {
        if(!root) return 0;
        int l = solve(root -> left, Map, maxCount);
        int r = solve(root -> right, Map, maxCount);
        Map[l + r + root -> val]++;
        maxCount = max(maxCount, Map[l + r + root -> val]);
        return l + r + root -> val;
    }
    vector<int> findFrequentTreeSum(TreeNode* root) {
        map<int, int> Map;
        vector<int> ans;
        int maxCount = 0;
        solve(root, Map, maxCount);
        for(auto it: Map) {
            if(it.second == maxCount)
                ans.push_back(it.first);
        }
        return ans;
    }
};
