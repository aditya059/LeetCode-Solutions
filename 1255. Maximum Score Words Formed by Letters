// C++
class Solution {
    void dfs(int i, vector<string> &words, int freq[26], vector<int> &score, int &ans, int currScore) {
        if(i >= words.size()) return;
        int val = 0;
        bool canTake = true;
        for(char ch: words[i]) {
            freq[ch - 'a']--;
            val += score[ch - 'a'];
            if(freq[ch - 'a'] < 0)
                canTake = false;
        }
        if(canTake) {
            ans = max(ans, currScore + val);
            dfs(i + 1, words, freq, score, ans, currScore + val);
        }
        for(char ch: words[i]) {
            freq[ch - 'a']++;
        }
        dfs(i + 1, words, freq, score, ans, currScore);
    }
public:
    int maxScoreWords(vector<string>& words, vector<char>& letters, vector<int>& score) {
        int freq[26] = {0}, ans = 0;
        for(char letter: letters) freq[letter - 'a']++;
        dfs(0, words, freq, score, ans, 0);
        return ans;
    }
};


// Golang
func dfs(i int, words []string, freq []int, score []int, ans *int, currScore int) {
    if i >= len(words) {return}
    var val int = 0
    var canTake bool = true
    for _, ch := range words[i] {
        freq[ch - 'a']--
        val += score[ch - 'a']
        if freq[ch - 'a'] < 0 {canTake = false}    
    }
    if canTake {
        if currScore + val > *ans {*ans = currScore + val}
        dfs(i + 1, words, freq, score, ans, currScore + val)
    }
    for _, ch := range words[i] {
        freq[ch - 'a']++
    }
    dfs(i + 1, words, freq, score, ans, currScore)
}

func maxScoreWords(words []string, letters []byte, score []int) int {
    freq := make([]int, 26)
    var ans int = 0
    for _, letter := range letters {freq[letter - 'a']++}
    dfs(0, words, freq, score, &ans, 0)
    return ans
}        
