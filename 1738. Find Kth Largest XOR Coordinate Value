// Sorting 
class Solution {
public:
    int kthLargestValue(vector<vector<int>>& matrix, int k) {
        int m = matrix.size(), n = matrix[0].size();
        vector<int> nums;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                int A = matrix[i][j];
                int B = i > 0? matrix[i - 1][j]: 0;
                int C = j > 0? matrix[i][j - 1]: 0;
                int D = i > 0 && j > 0? matrix[i - 1][j - 1]: 0;
                matrix[i][j] = A xor B xor C xor D;  
                nums.push_back(matrix[i][j]);
            }
        }
        sort(nums.begin(), nums.end());
        return nums[nums.size() - k];
    }
};


// Priority Queue
class Solution {
public:
    int kthLargestValue(vector<vector<int>>& matrix, int k) {
        int m = matrix.size(), n = matrix[0].size();
        priority_queue<int, vector<int>, greater<int>> PQ;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                int A = matrix[i][j];
                int B = i > 0? matrix[i - 1][j]: 0;
                int C = j > 0? matrix[i][j - 1]: 0;
                int D = i > 0 && j > 0? matrix[i - 1][j - 1]: 0;
                matrix[i][j] = A xor B xor C xor D;  
                PQ.push(matrix[i][j]);
                if(PQ.size() > k) PQ.pop();
            }
        }
        return PQ.top();;
    }
};
