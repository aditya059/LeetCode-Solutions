class Trie {
public:
    typedef struct TrieNode {
        TrieNode *children[26];
        bool endHere = false;
    } TrieNode;
    TrieNode *root;
    Trie() {
        root = new TrieNode();
    }
    
    void insert(string word) {
        TrieNode *ptr = root;
        for(int i = 0; i < word.length(); i++) {
            char ch = word[i];
            if(!ptr -> children[ch - 'a']) {
                TrieNode *temp = new TrieNode();
                ptr -> children[ch - 'a'] = temp;
            }
            ptr = ptr -> children[ch - 'a'];
        }
        ptr -> endHere = true;
    }
    
    bool search(string word) {
        TrieNode *ptr = root;
        for(int i = 0; i < word.length(); i++) {
            char ch = word[i];
            if(!ptr -> children[ch - 'a']) {
                return false;
            }
            ptr = ptr -> children[ch - 'a'];
        }
        return ptr -> endHere;
    }
    
    bool startsWith(string prefix) {
        TrieNode *ptr = root;
        for(int i = 0; i < prefix.length(); i++) {
            char ch = prefix[i];
            if(!ptr -> children[ch - 'a']) {
                return false;
            }
            ptr = ptr -> children[ch - 'a'];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
