\\ SC = O(mn)
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        vector<vector<int>> DP(coins.size() + 1, vector<int>(amount + 1, 0));
        for(int i = 1; i <= coins.size(); i++) {
            DP[i][0] = 1;
            for(int j = 1; j <= amount; j++) {
                if(coins[i - 1] > j)
                    DP[i][j] = DP[i - 1][j];
                else
                    DP[i][j] = DP[i - 1][j] + DP[i][j - coins[i - 1]];
            }
        }
        return DP[coins.size()][amount];
    }
};

OR

\\ SC = O(n)
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        vector<int> DP(amount + 1, 0);
        DP[0] = 1;
        for(int i = 1; i <= coins.size(); i++) {
            for(int j = 1; j <= amount; j++) {
                if(coins[i - 1] <= j)
                    DP[j] = DP[j] + DP[j - coins[i - 1]];
            }
        }
        return DP[amount];
    }
};


// Golang
func change(amount int, coins []int) int {
    DP := make([]int, amount + 1)
    DP[0] = 1
    for i := 1; i <= len(coins); i++ {
        for j := 1; j <= amount; j++ {
            if coins[i - 1] <= j {
                DP[j] = DP[j] + DP[j - coins[i - 1]]
            }
        }
    }
    return DP[amount]
}
