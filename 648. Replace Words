class Solution {
public:
    
    typedef struct TrieNode {
        TrieNode *children[26];
        bool endHere = false;
    } TrieNode;
    
    void insert(TrieNode *root, string &word) {
        TrieNode *ptr = root;
        for(int i = 0; i < word.length(); i++) {
            char ch = word[i];
            if(!ptr -> children[ch - 'a']) {
                TrieNode *temp = new TrieNode();
                ptr -> children[ch - 'a'] = temp;
            }
            ptr = ptr -> children[ch - 'a'];
        }
        ptr -> endHere = true;
    }
    
    int search(TrieNode *root, string &word) {
        TrieNode *ptr = root;
        int i;
        for(i = 0; i < word.length(); i++) {
            char ch = word[i];
            if(ptr -> endHere) 
                return i;
            if(!ptr -> children[ch - 'a']) {
                return -1;
            }
            ptr = ptr -> children[ch - 'a'];
        }
        return i;
    }
    
    string replaceWords(vector<string>& dictionary, string sentence) {
        TrieNode *root = new TrieNode();
        for(int i = 0; i < dictionary.size(); i++) {
            insert(root, dictionary[i]);
        }
        string ans = "";
        string word = "";
        for(int i = 0; i < sentence.length(); i++) {
            if(sentence[i] != ' ')
                word += sentence[i];
            else {
                ans += word.substr(0, search(root, word)) + " ";
                word = "";
            }
        }
        ans += word.substr(0, search(root, word));
        return ans;
    }
};
