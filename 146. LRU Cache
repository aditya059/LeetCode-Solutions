class LRUCache {
    private:
    int capacity;
    list<pair<int, int>> List;
    unordered_map<int, list<pair<int, int>>::iterator> Map;
public:
    LRUCache(int capacity) {
        this -> capacity = capacity;
    }
    
    int get(int key) {
        if(Map.find(key) == Map.end()) 
        return -1;
        list<pair<int, int>>:: iterator iter = Map[key];
        int value = (*iter).second;
        List.erase(iter);
        Map.erase(key);
        List.push_back({key, value});
        iter = List.end();
        Map.insert({key, --iter});
        return value;
    }
    
    void put(int key, int value) {
        if(Map.find(key) == Map.end()) {
            if(List.size() == capacity) {
                Map.erase(List.front().first);
                List.pop_front();
            }
            List.push_back({key, value});
            auto iter = List.end();
            Map.insert({key, --iter});
        }
        else {
            List.erase(Map[key]);
            Map.erase(key);
            List.push_back({key, value});
            auto iter = List.end();
            Map.insert({key, --iter});
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
