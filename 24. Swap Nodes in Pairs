//-----------------------------------------------------
// C++
//-----------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head == nullptr || head -> next == nullptr) return head;
        ListNode* temp = head -> next;
        head -> next = swapPairs(temp -> next);
        temp -> next = head;
        head = temp;
        return head;
    }
};

//-----------------------------------------------------
// Golang
//-----------------------------------------------------
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func swapPairs(head *ListNode) *ListNode {
    if head == nil || head.Next == nil {return head}
    temp := head.Next
    head.Next = swapPairs(temp.Next)
    temp.Next = head
    return temp
}
