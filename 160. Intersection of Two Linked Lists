/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int listLength(ListNode *head) {
        int count = 0;
        while(head != NULL) {
            count++;
            head = head -> next;
        }
        return count;
    }
    
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int length1 = listLength(headA);
        int length2 = listLength(headB);
        if(length1 < length2) {
            int temp1 = length1;
            length1 = length2;
            length2 = temp1;
            ListNode *temp2 = headA;
            headA = headB;
            headB = temp2;
        }
        int diffLength = length1 - length2;
        for(int i = 0; i < diffLength; i++) {
            headA = headA -> next;
        }
        while(headA && headB) {
            if(headA == headB)
                return headA;
            headA = headA -> next;
            headB = headB -> next;
        }
        return NULL;
    }
};

OR

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *p = headA, *q = headB;
        while(headA || headB) {
            if(!headA)
                headA = q;
            if(!headB)
                headB = p;
            if(headA == headB)
                break;
            headA = headA -> next;
            headB = headB -> next;
            if(headA == headB)
                break;
        }
        return headA;
    }
};
