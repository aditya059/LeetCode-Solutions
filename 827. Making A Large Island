class Solution {
    int colorIfValid(int i, int j, vector<vector<int>>& grid) {
        if(i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size()) return 0;
        return grid[i][j];
    }
    int dfs(int i, int j, vector<vector<int>>& grid, int color) {
        if(i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size() || grid[i][j] != 1) return 0;
        grid[i][j] = color;
        return 1 + dfs(i + 1, j, grid, color) + dfs(i, j + 1, grid, color) + dfs(i - 1, j, grid, color) + dfs(i, j - 1, grid, color);
    }
public:
    int largestIsland(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(), color = 2;
        vector<int> compSize(2);
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1)
                    compSize.push_back(dfs(i, j, grid, color++));
            }
        }
        int ans = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 0) {
                    unordered_set<int> Set = {colorIfValid(i + 1, j, grid), colorIfValid(i - 1, j, grid), colorIfValid(i, j + 1, grid), colorIfValid(i, j - 1, grid)};
                    int size = 1;
                    for(int color: Set) size += compSize[color];
                    ans = max(ans, size); 
                }
            }
        }
        return ans == 0? m * n: ans;
    }
};
