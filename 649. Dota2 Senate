// C++
class Solution {
public:
    string predictPartyVictory(string senate) {
        queue<int> R, D;
        int n = senate.size();
        for(int i = 0; i < n; i++) {
            if(senate[i] == 'R') {
                R.push(i);
            } else {
                D.push(i);
            }
        }
        while(R.size() && D.size()) {
            int A = R.front();
            int B = D.front();
            R.pop();
            D.pop();
            if(A < B) {
                R.push(A + n);
            } else {
                D.push(B + n);
            }
        }
        return D.size() == 0? "Radiant": "Dire";
    }
};


// Golang
func predictPartyVictory(senate string) string {
    R := []int{}
    D := []int{}
    var n int = len(senate);
    for i, ch := range senate {
        if ch == 'R' {
            R = append(R, i)
        } else {
            D = append(D, i)
        }
    }
    for len(R) > 0 && len(D) > 0 {
        if R[0] < D[0] {
            R = append(R, R[0] + n)
        } else {
            D = append(D, D[0] + n)
        }
        R = R[1:]
        D = D[1:]
    }
    if len(D) == 0 {return "Radiant"}
    return "Dire"
}
