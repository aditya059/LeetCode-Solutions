// C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    string solve(TreeNode* root, unordered_map<string, int> &count, vector<TreeNode*> &ans) {
        if(!root) return "";
        string temp = "(" + solve(root -> left, count, ans) + to_string(root -> val) + solve(root -> right, count, ans) + ")";
        count[temp]++;
        if(count[temp] == 2) ans.push_back(root);
        return temp; 
    }
public:
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        unordered_map<string, int> count;
        vector<TreeNode*> ans;
        solve(root, count, ans);
        return ans;
    }
};

-----------------------------------------------------------------------------------------------

// Golang
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

func solve(root *TreeNode, count map[string]int, ans *[]*TreeNode) string {
    if root == nil {return ""}
    temp := "(" + solve(root.Left, count, ans) + strconv.Itoa(root.Val) + solve(root.Right, count, ans) + ")"
    count[temp]++
    if count[temp] == 2 {
        *ans = append(*ans, root)
    }
    return temp
}

func findDuplicateSubtrees(root *TreeNode) []*TreeNode {
    count := make(map[string]int)
    ans := []*TreeNode{}
    solve(root, count, &ans)
    return ans
}  
