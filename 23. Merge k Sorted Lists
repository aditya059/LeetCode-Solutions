/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& arr) {
        set<pair<int, ListNode*>> Set;
        for(int i = 0; i < arr.size(); i++) {
            if(arr[i] != nullptr)
            Set.insert({arr[i] -> val, arr[i]});
        }
        ListNode* head = nullptr;
        ListNode* tail = nullptr;
        while(!Set.empty()) {
            pair<int, ListNode*> temp = *Set.begin();
            Set.erase(Set.begin());
            if(head == nullptr) {
                head = tail = temp.second;
            }
            else {
                tail -> next = temp.second;
                tail = tail -> next;
            }
            if(temp.second -> next != nullptr) {
                Set.insert({temp.second -> next -> val, temp.second -> next});
            }
        }
        return head;
    }
};

OR

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* A, ListNode* B) {
        if(A == nullptr) return B;
        if(B == nullptr) return A;
        if(A -> val <= B -> val) {
            A -> next = merge(A -> next, B);
            return A;
        }
        else {
            B -> next = merge(A, B -> next);
            return B;
        }
    }
    ListNode* mergeKLists(vector<ListNode*>& arr) {
        if(arr.size() == 0) return nullptr;
        int len = arr.size();
        while(len > 1) {
            for(int i = 0; i < len / 2; i++) {
                arr[i] = merge(arr[i], arr[len - 1 - i]);
            }
            len = (len + 1) / 2;
        }
        return arr[0];
    }
};

----------------------------------------------------------------------------------------------

// Golang
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */

func merge(A, B *ListNode) *ListNode {
    if A == nil {return B}
    if B == nil {return A}
    if A.Val <= B.Val {
        A.Next = merge(A.Next, B)
        return A
    } else {
        B.Next = merge(A, B.Next)
        return B
    }
}

func mergeKLists(lists []*ListNode) *ListNode {
    length := len(lists)
    if length == 0 {return nil}
    for length > 1 {
        for i := 0; i < length / 2; i++ {
            lists[i] = merge(lists[i], lists[length - 1 - i])
        }
        length = (length + 1) / 2
    }
    return lists[0]
}
