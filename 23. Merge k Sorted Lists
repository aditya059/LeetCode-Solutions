/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& arr) {
        set<pair<int, ListNode*>> Set;
        for(int i = 0; i < arr.size(); i++) {
            if(arr[i] != nullptr)
            Set.insert({arr[i] -> val, arr[i]});
        }
        ListNode* head = nullptr;
        ListNode* tail = nullptr;
        while(!Set.empty()) {
            pair<int, ListNode*> temp = *Set.begin();
            Set.erase(Set.begin());
            if(head == nullptr) {
                head = tail = temp.second;
            }
            else {
                tail -> next = temp.second;
                tail = tail -> next;
            }
            if(temp.second -> next != nullptr) {
                Set.insert({temp.second -> next -> val, temp.second -> next});
            }
        }
        return head;
    }
};
