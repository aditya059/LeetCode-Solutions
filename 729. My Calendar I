class MyCalendar {
public:
    vector<vector<int>> interval;
    MyCalendar() {
        
    }
    
    bool book(int start, int end) {
        for(int i = 0; i < interval.size(); i++) {
            if(start < interval[i][1] && end > interval[i][0])
                return false;
        }
        vector<int> temp;
        temp.push_back(start);
        temp.push_back(end);
        interval.push_back(temp);
        return true;
    }
};

/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar* obj = new MyCalendar();
 * bool param_1 = obj->book(start,end);
 */

OR

class MyCalendar {
public:
    set<pair<int, int>> interval;
    MyCalendar() {
        
    }
    
    bool book(int start, int end) {
        auto iter = interval.lower_bound({start, end});
        if(iter != interval.end() && end > iter -> first) return false;
        if(iter != interval.begin() && start < (--iter) -> second) return false;
        interval.insert({start, end});

        return true;
    }
};

/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar* obj = new MyCalendar();
 * bool param_1 = obj->book(start,end);
 */
