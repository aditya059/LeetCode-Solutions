class Solution {
public:
    int findCenter(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> freq(n + 2);
        for(int i = 0; i < n; i++) {
            freq[edges[i][0]]++;
            freq[edges[i][1]]++;
            if(freq[edges[i][0]] > 1) return edges[i][0];
            else if(freq[edges[i][1]] > 1) return edges[i][1];
        }
        return 0;
    }
};

OR

class Solution {
public:
    int findCenter(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> freq(n + 2);
        for(int i = 0; i < n; i++) {
            freq[edges[i][0]]++;
            freq[edges[i][1]]++;
            if(freq[edges[i][0]] == n) return edges[i][0];
            else if(freq[edges[i][1]] == n) return edges[i][1];
        }
        return 0;
    }
};

OR

class Solution {
public:
    int findCenter(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> freq(n + 2);
        for(int i = 0; i < 2; i++) {
            freq[edges[i][0]]++;
            freq[edges[i][1]]++;
            if(freq[edges[i][0]] > 1) return edges[i][0];
            else if(freq[edges[i][1]] > 1) return edges[i][1];
        }
        return 0;
    }
};

OR

class Solution {
public:
    int findCenter(vector<vector<int>>& edges) {
        if(edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1]) return edges[0][0];
        else return edges[0][1];
    }
};
