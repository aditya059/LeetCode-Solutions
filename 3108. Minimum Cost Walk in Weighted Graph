class Solution {
    int findParent(int u, vector<int> &parent) {
        if(parent[u] == u) return u;
        return parent[u] = findParent(parent[u], parent);
    }
    void unionSet(int u, int v, vector<int> &parent, int w, vector<int> &cost) {
        int parU = findParent(u, parent);
        int parV = findParent(v, parent);
        if(parV < parU) swap(parU, parV);
        cost[parU] &= cost[parV] & w;
        parent[parV] = parU;
    }
public:
    vector<int> minimumCost(int n, vector<vector<int>>& edges, vector<vector<int>>& query) {
        vector<int> parent(n), cost(n, INT_MAX);
        iota(parent.begin(), parent.end(), 0);
        for(int i = 0; i < edges.size(); i++) {
            unionSet(edges[i][0], edges[i][1], parent, edges[i][2], cost);
        }
        vector<int> ans;
        for(int i = 0; i < query.size(); i++) {
            int parU = findParent(query[i][0], parent);
            int parV = findParent(query[i][1], parent);
            ans.push_back(parU != parV? -1: cost[parU]);
        }
        return ans;
    }
};
