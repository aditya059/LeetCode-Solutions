/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* dfs(int preStart, int postStart, int len, unordered_map<int, int> &pos, vector<int>& preorder) {
        if(len <= 0) return nullptr;
        TreeNode *root = new TreeNode(preorder[preStart]);
        if(len == 1) return root;
        int leftLen = pos[preorder[preStart + 1]] - postStart + 1;
        root -> left = dfs(preStart + 1, postStart, leftLen, pos, preorder);
        root -> right = dfs(preStart + 1 + leftLen, postStart + leftLen, len - 1 - leftLen, pos, preorder);
        return root;
    }
public:
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        unordered_map<int, int> pos;
        for(int i = 0; i < preorder.size(); i++) {
            pos[postorder[i]] = i;
        }
        return dfs(0, 0, preorder.size(), pos, preorder);
    }
};
