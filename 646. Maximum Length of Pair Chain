// DP
class Solution {
public:
    static bool comp(vector<int> &a, vector<int> &b) {
        return a[0] < b[0];
    } 
    int findLongestChain(vector<vector<int>>& p) {
        sort(p.begin(), p.end(), comp);
        int n = p.size();
        int DP[n];
        DP[0] = 1;
        int ans = 1;
        for(int i = 1; i < n; i++) {
           DP[i] = 1;
           for(int j = 0; j < i; j++) {
               if(p[i][0] > p[j][1]) {
                    DP[i] = max(DP[j] + 1, DP[i]);
               }
           }
           
           ans = max(ans, DP[i]);
        }
        return ans;
    }
};
    

// Greedy
class Solution {
public:
    static bool comp(const vector<int> &a, const vector<int> &b) {
        return a[1] < b[1];
    } 
    int findLongestChain(vector<vector<int>>& p) {
        sort(p.begin(), p.end(), comp);
        int n = p.size();
        int ans = 0;
        int temp = INT_MIN;
        for(int i = 0; i < n; i++) {
           if(temp < p[i][0]) {
                ans++;
                temp = p[i][1];
           }
        }
        return ans;
    }
};
