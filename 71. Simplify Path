// C++
class Solution {
public:
    string simplifyPath(string path) {
        vector<string> temp;
        string word = "";
        for(int i = 0; i <= path.length(); i++) {
            if(i < path.length() && path[i] != '/')
                word += path[i];
            else {
                if(word == "..") {
                    if(!temp.empty())
                        temp.pop_back();
                }
                else if(word != "." && word != "/" && word != "")
                    temp.push_back(word);
                word = "";
            }
        }
        string ans = "";
        for(int i = 0; i < temp.size(); i++) {
            ans += "/" + temp[i];
        }
        return temp.size()? ans: "/";
    }
};


// Golang
func simplifyPath(path string) string {
    stack := make([]string, 3000)
    var top int = -1
    var word string = ""
    for i := 0; i <= len(path); i++ {
        if i < len(path) && path[i] != '/' {
            word += string(path[i])
        } else {
            if word == ".." {
                if top != -1 {top--}
            } else if word != "." && word != "/" && word != "" {
                top++
                stack[top] = word
            }
            word = ""
        }
    }
    var ans string = ""
    for i := 0; i <= top; i++ {
        ans += "/" + stack[i]
    }
    if top != -1 {return ans}
    return "/"
}
