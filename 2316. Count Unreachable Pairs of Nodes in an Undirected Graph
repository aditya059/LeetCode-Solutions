// C++
class Solution {
public:
    void dfs(int curr, vector<int> adjList[], vector<bool> &visited, int &len) {
        if(visited[curr]) return;
        visited[curr] = true;
        len++;
        for(int next: adjList[curr]) {
            dfs(next, adjList, visited, len);
        }
    }
    long long countPairs(int n, vector<vector<int>>& edges) {
        long long ans = 0;
        vector<int> adjList[n];
        vector<bool> visited(n);
        for(vector<int> edge: edges) {
            adjList[edge[0]].push_back(edge[1]);
            adjList[edge[1]].push_back(edge[0]);
        }
        for(int i = 0; i < n; i++) {
            if(!visited[i]) {
                int len = 0;
                dfs(i, adjList, visited, len);
                ans += len * 1L * (n - len);
            }
        }
        return ans / 2;
    }
};

//-----------------------------------------------

// Golang
func dfs(curr int, adjList [][]int, visited []bool, len *int) {
    if visited[curr] {return}
    visited[curr] = true
    *len++
    for _, next := range adjList[curr] {
        dfs(next, adjList, visited, len)
    }
}

func countPairs(n int, edges [][]int) int64 {
    var ans int64 = 0
    adjList := make([][]int, n)
    visited := make([]bool, n)
    for _, edge := range edges {
        adjList[edge[0]] = append(adjList[edge[0]], edge[1])
        adjList[edge[1]] = append(adjList[edge[1]], edge[0])
    }
    for i := 0; i < n; i++ {
        if !visited[i] {
            var len int = 0
            dfs(i, adjList, visited, &len)
            ans += int64(len) * int64(n - len)
        }
    }
    return ans / 2
}
