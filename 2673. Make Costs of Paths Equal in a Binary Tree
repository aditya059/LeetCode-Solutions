// Iterative (Bottom Up)
class Solution {
public:
    int minIncrements(int n, vector<int>& cost) {
        int ans = 0;
        for(int i = n / 2 - 1; i >= 0; i--) {
            ans += abs(cost[2 * i + 1] - cost[2 * i + 2]);
            cost[i] += max(cost[2 * i + 1], cost[2 * i + 2]);
        }
        return ans;
    }
};


// Recursive (DFS)
class Solution {
    int dfs(int i, int &ans, vector<int>& cost) {
        if(i >= cost.size()) return 0;
        int l = dfs(2 * i + 1, ans, cost);
        int r = dfs(2 * i + 2, ans, cost);
        ans += abs(l - r);
        return cost[i] + max(l, r);
    }
public:
    int minIncrements(int n, vector<int>& cost) {
        int ans = 0;
        dfs(0, ans, cost);
        return ans;
    }
};
