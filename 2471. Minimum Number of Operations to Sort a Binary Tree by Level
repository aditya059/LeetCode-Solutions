/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minimumOperations(TreeNode* root) {
        queue<TreeNode*> Queue;
        Queue.push(root);
        int ans = 0;
        while(!Queue.empty()) {
            int sz = Queue.size();
            vector<int> nums(sz), sorted(sz);
            for(int i = 0; i < sz; i++) {
                TreeNode* curr = Queue.front();
                Queue.pop();
                nums[i] = sorted[i] = curr -> val;
                if(curr -> left) Queue.push(curr -> left);
                if(curr -> right) Queue.push(curr -> right);
            }
            sort(sorted.begin(), sorted.end());
            for(int i = 0; i < sz; i++) {
                for(; sorted[i] != nums[i]; ) {
                    ans++;
                    int ind = lower_bound(sorted.begin(), sorted.end(), nums[i]) - sorted.begin();
                    swap(nums[i], nums[ind]);
                }
            }
        }
        return ans;
    }
};

OR

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minimumOperations(TreeNode* root) {
        queue<TreeNode*> Queue;
        Queue.push(root);
        int ans = 0;
        while(!Queue.empty()) {
            int sz = Queue.size();
            vector<int> nums(sz), index(sz);
            iota(index.begin(), index.end(), 0);
            for(int i = 0; i < sz; i++) {
                TreeNode* curr = Queue.front();
                Queue.pop();
                nums[i] = curr -> val;
                if(curr -> left) Queue.push(curr -> left);
                if(curr -> right) Queue.push(curr -> right);
            }
            sort(index.begin(), index.end(), [&](int i, int j) {
                return nums[i] < nums[j];
            });
            for(int i = 0; i < sz; i++) {
                for(; i != index[i]; ) {
                    ans++;
                    swap(index[i], index[index[i]]);
                }
            }
        }
        return ans;
    }
};
