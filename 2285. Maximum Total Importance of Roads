//----------------------------------------------------------
// C++
//----------------------------------------------------------
// Priority Queue
class Solution {
public:
    long long maximumImportance(int n, vector<vector<int>>& roads) {
        vector<int> count(n);
        for(vector<int> road: roads) {
            count[road[0]]++;
            count[road[1]]++;
        }
        priority_queue<int> PQ;
        for(int val: count) PQ.push(val);
        long long ans = 0;
        while(!PQ.empty()) {
            ans += PQ.top() * 1L * n--;
            PQ.pop();
        }
        return ans;
    }
};

OR

// Sorting
class Solution {
public:
    long long maximumImportance(int n, vector<vector<int>>& roads) {
        vector<int> count(n);
        for(vector<int> road: roads) {
            count[road[0]]++;
            count[road[1]]++;
        }
        sort(count.begin(), count.end());
        long long ans = 0;
        for(int i = 0; i < n; i++) {
            ans += count[i] * 1L * (i + 1);
        }
        return ans;
    }
};


//----------------------------------------------------------
// Golang
//----------------------------------------------------------
func maximumImportance(n int, roads [][]int) int64 {
    count := make([]int, n)
    for _, road := range roads {
        count[road[0]]++
        count[road[1]]++
    }
    sort.Ints(count)
    var ans int64 = 0
    for i := 0; i < n; i++ {
        ans += int64(count[i]) * int64(i + 1)
    }
    return ans
}
