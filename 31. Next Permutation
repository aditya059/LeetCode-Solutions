class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int i, j;
        for(i = nums.size() - 2; i >= 0; i--) {
            if(nums[i] < nums[i + 1])
                break;
        }
        if(i == -1) { 
            reverse(nums.begin(), nums.end());
            return;
        }
        int low = i + 1;
        int high = nums.size() - 1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] > nums[i]) {
                j = mid;
                low = mid + 1;
            }
            else {
                high = mid - 1;
            }
        }
        swap(nums[i], nums[j]);
        reverse(nums.begin() + i + 1, nums.end());
    }
};

OR

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int i, j;
        for(i = nums.size() - 2; i >= 0; i--) {
            if(nums[i] < nums[i + 1])
                break;
        }
        if(i == -1) { 
            reverse(nums.begin(), nums.end());
            return;
        }
        for(j = nums.size() - 1; j >= 0; j--) {
            if(nums[j] > nums[i]) {
                swap(nums[i], nums[j]);
                break;
            }
        }
        reverse(nums.begin() + i + 1, nums.end());
    }
};
