class Solution {
public:
    int maxAbsoluteSum(vector<int>& nums) {
        int max_sum_end_here = 0;
        int max_sum_so_far = INT_MIN;
        for(int i = 0; i < nums.size(); i++) {
            max_sum_end_here += nums[i];
            max_sum_so_far = max(max_sum_so_far, max_sum_end_here);
            max_sum_end_here = max(max_sum_end_here, 0);
        }
        int ans = max_sum_so_far;
        max_sum_end_here = 0;
        max_sum_so_far = INT_MIN;
        for(int i = 0; i < nums.size(); i++) {
            max_sum_end_here -= nums[i];
            max_sum_so_far = max(max_sum_so_far, max_sum_end_here);
            max_sum_end_here = max(max_sum_end_here, 0);
        }
        return max(ans, max_sum_so_far);
    }
};


OR


class Solution {
public:
    int maxAbsoluteSum(vector<int>& nums) {
        int max_sum_end_here1 = 0;
        int max_sum_so_far1 = INT_MIN;
        int max_sum_end_here2 = 0;
        int max_sum_so_far2 = INT_MIN;
        for(int i = 0; i < nums.size(); i++) {
            max_sum_end_here1 += nums[i];
            max_sum_so_far1 = max(max_sum_so_far1, max_sum_end_here1);
            max_sum_end_here1 = max(max_sum_end_here1, 0);
            max_sum_end_here2 -= nums[i];
            max_sum_so_far2 = max(max_sum_so_far2, max_sum_end_here2);
            max_sum_end_here2 = max(max_sum_end_here2, 0);
        }
        return max(max_sum_so_far1, max_sum_so_far2);
    }
};
