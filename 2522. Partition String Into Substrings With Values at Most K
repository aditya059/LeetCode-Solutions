// C++
class Solution {
public:
    int minimumPartition(string s, int k) {
        int ans = 0;
        long long num = 0;
        for(int i = 0; i < s.length(); i++) {
            if(num * 10 + (s[i] - '0') > k) {
                if(num > k) return -1;
                ans++;
                num = s[i] - '0';
            } else {
                num = num * 10 + (s[i] - '0');
            }
        }
        if(num > k) return -1;
        if(num > 0 && num <= k) ans++;
        return ans;
    }
};

OR

class Solution {
public:
    int minimumPartition(string s, int k) {
        int ans = 1;
        long long num = 0;
        for(int i = 0; i < s.length(); i++) {
            num = num * 10 + (s[i] - '0');
            if(num > k) {
                ans++;
                num = s[i] - '0';
            }
            if(num > k) return -1;
        }
        return ans;
    }
};


// Golang
func minimumPartition(s string, k int) int {
    var ans int = 0
    var num int64 = 0
    for i := 0; i < len(s); i++ {
        if num * 10 + int64(s[i] - '0') > int64(k) {
            if num > int64(k) {return -1}
            ans++
            num = int64(s[i] - '0')
        } else {
            num = num * 10 + int64(s[i] - '0')
        }
    }
    if num > int64(k) {return -1}
    if num > 0 && num <= int64(k) {ans++}
    return ans
}
