//-----------------------------------------------------
// C++
//-----------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void compute(TreeNode* root, int &ans, int temp) {
        if(!root)
            return;
        temp = temp * 10 + root -> val;
        if(!root -> left && !root -> right)
            ans += temp;
        compute(root -> left, ans, temp);
        compute(root -> right, ans, temp);
        temp = (temp - root -> val) / 10;
    }
    int sumNumbers(TreeNode* root) {
        int ans = 0;
        compute(root, ans, 0);
        return ans;
    }
};


//-----------------------------------------------------
// Golang
//-----------------------------------------------------
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

func compute(root *TreeNode, ans *int, temp int) {
    if root == nil {return}
    temp = temp * 10 + root.Val
    if root.Left == nil && root.Right == nil {
        *ans += temp
    }
    compute(root.Left, ans, temp)
    compute(root.Right, ans, temp)
    temp = (temp - root.Val) / 10
}

func sumNumbers(root *TreeNode) int {
    var ans int = 0
    compute(root, &ans, 0)
    return ans
}
