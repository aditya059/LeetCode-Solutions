class Solution {
    bool isSubseqRepeatedKTimes(string &s, string &pattern, int k) {
        int j = 0, matched = 0;
        for(int i = 0; i < s.size(); i++) {
            if(s[i] == pattern[j]) {
                j++;
                if(j == pattern.size()) {
                    matched++;
                    j = 0;
                    if(matched == k) return true;
                }
            }
        }
        return false;
    }
public:
    string longestSubsequenceRepeatedK(string s, int k) {
        int freq[26] = {0};
        for(int i = 0; i < s.length(); i++) {
            freq[s[i] - 'a']++;
        }
        vector<char> candidate;
        for(int i = 0; i < 26; i++) {
            if(freq[i] >= k) candidate.push_back(i + 'a');
        }
        queue<string> Queue;
        for(int i = 0; i < candidate.size(); i++) {
            Queue.push(string(1, candidate[i]));
        }
        string ans = "";
        while(!Queue.empty()) {
            string curr = Queue.front();
            Queue.pop();
            if(curr.size() >= ans.size()) ans = curr;
            for(int i = 0; i < candidate.size(); i++) {
                string next = curr + candidate[i];
                if(isSubseqRepeatedKTimes(s, next, k)) {
                    Queue.push(next);
                }
            }
        }
        return ans;
    }
};
