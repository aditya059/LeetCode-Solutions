// C++
class Solution {
    const int mod = 1e9 + 7;
    int solve(int i, int j, int k, int n, vector<vector<int>> &memo) {
        if(i == 0 && j == 0) return 1;
        if(i == 0 || j == 0) return 0;
        if(memo[i][j] != -1) return memo[i][j];
        memo[i][j] = (solve(i - 1, j - 1, k, n, memo) * 1L * (n - j + 1)) % mod; 
        if(j > k) 
            memo[i][j] = (memo[i][j] + (solve(i - 1, j, k, n, memo) * 1L * (j - k)) % mod) % mod;
        return memo[i][j];
    } 
public:
    int numMusicPlaylists(int n, int goal, int k) {
        vector<vector<int>> memo(goal + 1, vector<int>(n + 1, -1));
        return solve(goal, n, k, n, memo);
    }
};


// Golang
const mod int = 1e9 + 7

func solve(i, j, k, n int, memo [][]int) int {
    if i == 0 && j == 0 {return 1}
    if i == 0 || j == 0 {return 0}
    if memo[i][j] != -1 {return memo[i][j]}
    memo[i][j] = (solve(i - 1, j - 1, k, n, memo) * (n - j + 1)) % mod 
    if j > k {
        memo[i][j] = (memo[i][j] + (solve(i - 1, j, k, n, memo) * (j - k)) % mod) % mod
    } 
    return memo[i][j]
}

func numMusicPlaylists(n int, goal int, k int) int {
    memo := make([][]int, goal + 1)
    for i := 0; i <= goal; i++ {
        memo[i] = make([]int, n + 1) 
        for j := 0; j <= n; j++ {
            memo[i][j] = -1
        }
    }
    return solve(goal, n, k, n, memo)
}
