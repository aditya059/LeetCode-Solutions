class Solution {
    const int MOD = 1e9 + 7;
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<int, int>> adjList[201];
        for(int i = 0; i < roads.size(); i++) {
            adjList[roads[i][0]].push_back({roads[i][1], roads[i][2]});
            adjList[roads[i][1]].push_back({roads[i][0], roads[i][2]});
        }
        priority_queue<pair<long, int>, vector<pair<long, int>>,
                       greater<>> PQ;
        PQ.push({0, 0});
        vector<long> shortestTime(n, LLONG_MAX);
        vector<int> countShortestTime(n);
        shortestTime[0] = 0;
        countShortestTime[0] = 1;
        while(!PQ.empty()) {
            auto [currTime,  curr] = PQ.top();
            PQ.pop();
            if(currTime > shortestTime[curr]) continue;
            for(auto nextPair: adjList[curr]) {
                int next = nextPair.first, roadTime = nextPair.second;
                long nextTime = currTime + roadTime;
                if(nextTime < shortestTime[next]) {
                    shortestTime[next] = nextTime;
                    countShortestTime[next] = countShortestTime[curr];
                    PQ.push({shortestTime[next], next});
                } else if(nextTime == shortestTime[next]) {
                    countShortestTime[next] = (countShortestTime[next] + countShortestTime[curr]) % MOD;
                }
            }
        }
        return countShortestTime[n - 1];
    }
};
