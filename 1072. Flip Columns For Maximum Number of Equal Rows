// SC = O(1)
class Solution {
public:
    int maxEqualRowsAfterFlips(vector<vector<int>>& matrix) {
        int m = matrix.size(), n = matrix[0].size(), ans = 0;
        for(int i = 0; i < m; i++) {
            int sameRowCount = 0, flippedRowCount = 0;
            for(int j = 0; j < m; j++) {
                int same = 0, flipped = 0;
                for(int k = 0; k < n; k++) {
                    same += matrix[i][k] xor matrix[j][k];
                    flipped += (1 - matrix[i][k]) xor matrix[j][k];
                }
                sameRowCount += (same == 0) || (same == n);
                flippedRowCount += (flipped == 0) || (flipped == n); 
            }
            ans = max(ans, max(sameRowCount, flippedRowCount));
        }
        return ans;
    }
};

OR

// Hashmap
class Solution {
public:
    int maxEqualRowsAfterFlips(vector<vector<int>>& matrix) {
        int m = matrix.size(), n = matrix[0].size(), ans = 0;
        map<vector<int>, int> Map;
        for(int i = 0; i < m; i++) {
            vector<int> flipped(n);
            for(int j = 0; j < n; j++) {
                flipped[j] = 1 - matrix[i][j];
            }
            Map[matrix[i]]++;
            Map[flipped]++;
            ans = max(ans, max(Map[matrix[i]], Map[flipped]));
        }
        return ans;
    }
};
