class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        unordered_set<string> visited(deadends.begin(), deadends.end());
        if(visited.find("0000") != visited.end()) return -1;
        visited.insert("0000");
        int ans = 0;
        queue<string> Queue;
        Queue.push("0000");
        while(!Queue.empty()) {
            int sz = Queue.size();
            for(int i = 0; i < sz; i++) {
                string curr = Queue.front();
                Queue.pop();
                if(curr == target) return ans;
                for(int j = 0; j < 4; j++) {
                    char ch = curr[j];
                    curr[j] = '0' + (curr[j] + 1 - '0') % 10;
                    if(visited.find(curr) == visited.end()) {
                        visited.insert(curr);
                        Queue.push(curr);
                    }
                    curr[j] = ch;
                    curr[j] = '0' + (curr[j] - '0' + 9) % 10;
                    if(visited.find(curr) == visited.end()) {
                        visited.insert(curr);
                        Queue.push(curr);
                    }
                    curr[j] = ch; 
                }
            }
            ans++;
        }
        return -1;
    }
};
