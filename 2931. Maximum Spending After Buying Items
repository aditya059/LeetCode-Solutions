// Priority Queue
class Solution {
public:
    long long maxSpending(vector<vector<int>>& values) {
        priority_queue<int> PQ;
        for(int i = 0; i < values.size(); i++) {
            for(int j = 0; j < values[i].size(); j++) {
                PQ.push(-values[i][j]);
            }
        }
        long long ans = 0;
        int n = values.size() * values[0].size();
        for(int i = 1; i <= n; i++) {
            ans += -i * 1LL * PQ.top();
            PQ.pop(); 
        }
        return ans;
    }
};


// Sorting
class Solution {
public:
    long long maxSpending(vector<vector<int>>& values) {
        vector<int> cost;
        for(int i = 0; i < values.size(); i++) {
            for(int j = 0; j < values[i].size(); j++) {
                cost.push_back(values[i][j]);
            }
        }
        long long ans = 0;
        sort(cost.begin(), cost.end());
        for(int i = 0; i < cost.size(); i++) {
            ans += (i + 1) * 1LL * cost[i];
        }
        return ans;
    }
};
