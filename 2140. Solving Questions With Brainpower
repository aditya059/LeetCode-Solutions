// C++
class Solution {
public:
    long long mostPoints(vector<vector<int>>& questions) {
        int n = questions.size();
        vector<long long> DP(n, 0);
        DP[n - 1] = questions[n - 1][0];
        for(int i = n - 2; i >= 0; i--) {
            int next = i + 1 + questions[i][1];
            DP[i] = max(DP[i + 1], questions[i][0] + (next < n? DP[next]: 0));
        }
        return DP[0];
    }
};


// Golang
func max(a, b int64) int64 {
    if a > b {return a}
    return b
}

func mostPoints(questions [][]int) int64 {
    var n int = len(questions)
    DP := make([]int64, n)
    DP[n - 1] = int64(questions[n - 1][0])
    for i := n - 2; i >= 0; i-- {
        next := i + 1 + questions[i][1]
        DP[i] = max(DP[i + 1], int64(questions[i][0]))
        if next < n {
            DP[i] = max(DP[i + 1], int64(questions[i][0]) + DP[next])
        } 
    }
    return DP[0];
}
