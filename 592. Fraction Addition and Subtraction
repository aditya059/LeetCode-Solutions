class Solution {
public:
    string fractionAddition(string expression) {
        int ansN = 0, ansD = 1, i = (expression[i] == '-') - 1, len = expression.length();
        while(i < len) {
            int sign = 1, currN = 0, currD = 0;
            if(i > -1 && expression[i] == '-') sign = -1; 
            i++;
            while(expression[i] != '/') currN = currN * 10 + (expression[i++] - '0');
            i++;
            while(expression[i] >= '0' && expression[i] <= '9') currD = currD * 10 + (expression[i++] - '0');
            int lcm = (ansD * currD) / gcd(ansD, currD);
            ansN = ansN * (lcm / ansD) + sign * currN * (lcm / currD);
            ansD = lcm;
        }
        int g = gcd(ansN, ansD);
        return to_string(ansN / g) + "/" + to_string(ansD / g);
    }
};
