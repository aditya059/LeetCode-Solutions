// C++
class Solution {
public:
    int minimumWhiteTiles(string floor, int numCarpets, int carpetLen) {
        int n = floor.size();
        vector<vector<int>> DP(2, vector<int>(n + carpetLen));
        for(int i = n - 1; i >= 0; i--) DP[0][i] += DP[0][i + 1] + floor[i] - '0';
        for(int i = 0; i < numCarpets; i++) {
            for(int j = n - 1; j >= 0; j--) {
                DP[(i + 1) % 2][j] = min(DP[i % 2][j + carpetLen], DP[(i + 1) % 2][j + 1] + (floor[j] - '0')); 
            }
        }
        return DP[numCarpets % 2][0];
    }
};


// Golang
func minimumWhiteTiles(floor string, numCarpets int, carpetLen int) int {
    var n int = len(floor)
    DP := make([][]int, 2)
    DP[0] = make([]int, n + carpetLen)
    DP[1] = make([]int, n + carpetLen)
    for i := n - 1; i >= 0; i-- {
        DP[0][i] += DP[0][i + 1] + int(floor[i] - '0')
    } 
    for i := 0; i < numCarpets; i++ {
        for j := n - 1; j >= 0; j-- {
            DP[(i + 1) % 2][j] = DP[(i + 1) % 2][j + 1] + int(floor[j] - '0')
            if DP[i % 2][j + carpetLen] < DP[(i + 1) % 2][j] {
                DP[(i + 1) % 2][j] = DP[i % 2][j + carpetLen]
            }
        }
    }
    return DP[numCarpets % 2][0]
}
