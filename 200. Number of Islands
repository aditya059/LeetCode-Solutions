class Solution {
public:
    void dfs(vector<vector<char>>& M, int n, int m, int i, int j) {
        if(i < 0 || i >= n || j < 0 || j >= m || M[i][j] == '0')
            return;
        M[i][j] = '0';
        dfs(M, n, m, i, j + 1);
        dfs(M, n, m, i, j - 1);
        dfs(M, n, m, i - 1, j);
        dfs(M, n, m, i + 1, j);
    }
    int numIslands(vector<vector<char>>& M) {
        int count = 0;
        int n = M.size();
        int m = M[0].size();
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(M[i][j] == '1') {
                    dfs(M, n, m, i, j);
                    count++;
                }
            }
        }
        return count;
    }
};
