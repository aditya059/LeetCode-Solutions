class Solution {
    int solve(int ringInd, int keyInd, string &ring, string &key, vector<vector<int>> &memo) {
        if(keyInd == key.size()) return 0;
        if(memo[ringInd][keyInd] != -1) return memo[ringInd][keyInd];
        int minStep = INT_MAX, n = ring.size();
        for(int i = 0; i < n; i++) {
            if(ring[i] == key[keyInd]) {
                int dist = abs(i - ringInd);
                int steps = 1 + min(dist, n - dist) + solve(i, keyInd + 1, ring, key, memo);
                minStep = min(minStep, steps);
            }
        }
        return memo[ringInd][keyInd] = minStep;
    }
public:
    int findRotateSteps(string ring, string key) {
        vector<vector<int>> memo(ring.size(), vector<int>(key.size(), -1));
        return solve(0, 0, ring, key, memo);
    }
};
