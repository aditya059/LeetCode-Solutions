// Prefix Sum + Hash Table
class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        unordered_map<int, int> Map;
        Map[0] = 1;
        int sum = 0, ans = 0;
        for(int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            ans += Map[sum - goal]; 
            Map[sum]++;
        }
        return ans;
    }
};

OR

// Sliding Window
class Solution {
    int atmostGoal(vector<int>& nums, int goal) {
        int ans = 0;
        for(int start = 0, end = 0; end < nums.size(); end++) {
            goal -= nums[end];
            while(goal < 0) {
                goal += nums[start++];
            }
            ans += end - start + 1;
        }
        return ans;
    }
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        return atmostGoal(nums, goal) - (goal > 0? atmostGoal(nums, goal - 1): 0);
    }
};
