class Solution {
    const int mod = 1e9 + 7; 
public:
    int knightDialer(int n) {
        vector<vector<int>> DP(2, vector<int>(10));
        for(int i = 0; i < 10; i++) DP[0][i] = 1;
        for(int i = 1; i < n; i++) {
            int j = i & 1;
            int k = (i - 1) & 1;
            DP[j][0] = (DP[k][4] + DP[k][6]) % mod;
            DP[j][1] = (DP[k][6] + DP[k][8]) % mod;
            DP[j][2] = (DP[k][7] + DP[k][9]) % mod;
            DP[j][3] = (DP[k][4] + DP[k][8]) % mod;
            DP[j][4] = ((DP[k][0] + DP[k][3]) % mod + DP[k][9]) % mod;
            DP[j][5] = 0;
            DP[j][6] = ((DP[k][0] + DP[k][1]) % mod + DP[k][7]) % mod;
            DP[j][7] = (DP[k][2] + DP[k][6]) % mod;
            DP[j][8] = (DP[k][1] + DP[k][3]) % mod;
            DP[j][9] = (DP[k][2] + DP[k][4]) % mod;
        }
        int ans = 0;
        for(int i = 0; i < 10; i++) ans = (ans + DP[(n - 1) % 2][i]) % mod;
        return ans;
    }
};
