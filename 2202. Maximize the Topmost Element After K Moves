// C++
class Solution {
public:
    int maximumTop(vector<int>& nums, int k) {
        int ans = -1, n = nums.size();
        n = min(n, k - 1);
        for(int i = 0; i < n; i++) {
            ans = max(ans, nums[i]);
        }
        if(nums.size() == 1 && k % 2 == 1) return -1;
        if(k < nums.size()) ans = max(ans, nums[k]);
        return ans;
    }
};


// Golang
func maximumTop(nums []int, k int) int {
    var ans, n int = -1, len(nums)
    if k - 1 < n {n = k - 1}
    for i := 0; i < n; i++ {
        if nums[i] > ans {ans = nums[i]}
    }
    if len(nums) == 1 && k % 2 == 1 {return -1}
    if k < len(nums) && nums[k] > ans {
        ans = nums[k]
    }
    return ans
}
