class Solution {
    int dfs(int curr, int parent, vector<int> adjList[], vector<int> &subTreeNodeCount, int &ans) {
        int firstVal = -1;
        bool flag = true;
        for(int next: adjList[curr]) {
            if(next == parent) continue;
            subTreeNodeCount[curr] += dfs(next, curr, adjList, subTreeNodeCount, ans);
            if(firstVal == -1) {
                firstVal = subTreeNodeCount[next];
            } else if(subTreeNodeCount[next] != firstVal) {
                flag = false;
            }
        }
        ans += flag;
        return ++subTreeNodeCount[curr];
    }
public:
    int countGoodNodes(vector<vector<int>>& edges) {
        int n = edges.size() + 1, ans = 0;
        vector<int> adjList[n];
        for(int i = 0; i < edges.size(); i++) {
            adjList[edges[i][0]].push_back(edges[i][1]);
            adjList[edges[i][1]].push_back(edges[i][0]);
        }
        vector<int> subTreeNodeCount(n);
        dfs(0, -1, adjList, subTreeNodeCount, ans);
        return ans;
    }
};
