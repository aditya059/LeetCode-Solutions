class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.length(), n = word2.length();
        if(m < n) return minDistance(word2, word1);
        vector<vector<int>> DP(2, vector<int>(n + 1));
        iota(DP[0].begin(), DP[0].end(), 0);
        for(int i = 0; i < m; i++) {
            DP[(i + 1) % 2][0] = i + 1;
            for(int j = 0; j < n; j++) {
                if(word1[i] == word2[j])
                    DP[(i + 1) % 2][j + 1] = DP[i % 2][j];
                else
                    DP[(i + 1) % 2][j + 1] = 1 + min(DP[i % 2][j + 1], DP[(i + 1) % 2][j]);
            }
        }
        return DP[m % 2][n];
    }
};
