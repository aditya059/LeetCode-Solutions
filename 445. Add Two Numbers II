//----------------------------------------------------------------------
// C++ 
//----------------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode *head) {
        if(head == nullptr || head -> next == nullptr) 
            return head;
        ListNode* p = reverse(head -> next);
        head -> next -> next = head;
        head -> next = nullptr;
        return p;
    }
    ListNode* addTwoNumbers(ListNode* first, ListNode* second) {
        first = reverse(first);
        second = reverse(second);
        int carry = 0;
        ListNode* third = nullptr, *last; 
        while(first || second || carry) {
            int sum = (first ? first -> val: 0) + (second ? second -> val: 0) + carry;
            ListNode *temp = new ListNode(sum % 10);
            if(third == nullptr) {
                third = last = temp;
            }
            else {
                last -> next = temp;
                last = last -> next;
            }
            carry = sum / 10;
            first = first? first -> next: nullptr;
            second = second? second -> next: nullptr;
        }
        third = reverse(third);
        return third;
    }
};


//----------------------------------------------------------------------
// Golang
//----------------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func reverse(head *ListNode) *ListNode {
    if head == nil || head.Next == nil {
        return head
    } 
    p := reverse(head.Next)
    head.Next.Next = head
    head.Next = nil
    return p
}

func addTwoNumbers(first *ListNode, second *ListNode) *ListNode {
    first = reverse(first)
    second = reverse(second)
    carry := 0
    var third, last *ListNode = nil, nil
    for first != nil || second != nil || carry != 0 {
        sum := carry 
        if first != nil {
            sum += first.Val
        }
        if second != nil {
            sum += second.Val
        }
        temp := &ListNode {Val: sum % 10, Next: nil}
        if third == nil {
            third = temp
            last = temp
        } else {
            last.Next = temp
            last = last.Next
        }
        carry = sum / 10
        if first != nil {
            first = first.Next
        }
        if second != nil {
            second = second.Next
        }
    }
    third = reverse(third)
    return third
}
