// SC = O(max_element)
class Solution {
    int findParent(int u, vector<int> &parent) {
        if(parent[u] == u) return u;
        return parent[u] = findParent(parent[u], parent);
    }
    void unionSet(int u, int v, vector<int> &parent) {
        int parU = findParent(u, parent);
        int parV = findParent(v, parent);
        if(parU == parV) return;
        if(parU < parV) parent[parV] = parU;
        else parent[parU] = parV;
    }
public:
    bool gcdSort(vector<int>& nums) {
        int n = nums.size(), m = *max_element(nums.begin(), nums.end());
        vector<int> parent(m + 1);
        iota(parent.begin(), parent.end(), 0);
        for(int i = 0; i < n; i++) {
            int num = nums[i];
            for(int p = 2; p * p <= num; p++) {
                if(num % p == 0) {
                    unionSet(p, nums[i], parent);
                    while(num % p == 0) num /= p;
                }
            }
            if(num > 1) unionSet(num, nums[i], parent);
        }
        vector<int> sortedNums(nums);
        sort(sortedNums.begin(), sortedNums.end());
        for(int i = 0; i < n; i++) {
            if(findParent(nums[i], parent) != findParent(sortedNums[i], parent)) return false;
        }
        return true;
    }
};


// SC = O(n)
class Solution {
    int findParent(int u, vector<int> &parent) {
        if(parent[u] == u) return u;
        return parent[u] = findParent(parent[u], parent);
    }
    void unionSet(int u, int v, vector<int> &parent) {
        int parU = findParent(u, parent);
        int parV = findParent(v, parent);
        if(parU == parV) return;
        if(parU < parV) parent[parV] = parU;
        else parent[parU] = parV;
    }
public:
    bool gcdSort(vector<int>& nums) {
        int n = nums.size();
        vector<int> parent(n);
        iota(parent.begin(), parent.end(), 0);
        unordered_map<int, int> seen;
        for(int i = 0; i < n; i++) {
            int num = nums[i];
            for(int p = 2; p * p <= num; p++) {
                if(num % p == 0) {
                    if(seen.find(p) != seen.end()) 
                        unionSet(seen[p], i, parent);
                    else
                        seen[p] = i;
                    while(num % p == 0) num /= p;
                }
            }
            if(num > 1) {
                if(seen.find(num) != seen.end()) 
                    unionSet(seen[num], i, parent);
                else
                    seen[num] = i;
            }
        }
        vector<int> posInSorted(n);
        iota(posInSorted.begin(), posInSorted.end(), 0);
        sort(posInSorted.begin(), posInSorted.end(), [&](int i, int j) {
            return nums[i] < nums[j];
        });
        for(int i = 0; i < n; i++) {
            if(findParent(i, parent) != findParent(posInSorted[i], parent)) return false;
        }
        return true;
    }
};
