// C++
class Solution {
public:
    int distinctPrimeFactors(vector<int>& nums) {
        vector<int> isPrime(1001, true);
        isPrime[0] = isPrime[1] = false;
        for(int i = 2; i <= 1000; i++) {
            if(!isPrime[i]) continue;
            for(int j = i + i; j <= 1000; j += i) {
                isPrime[j] = false;
            }
        }
        unordered_set<int> Set;
        for(int num: nums) {
            for(int i = 2; i <= num; i++) {
                if(!isPrime[i]) continue;
                while(num > 1 && num % i == 0) {
                    Set.insert(i);
                    num /= i;
                }
            }
        }
        return Set.size();
    }
};

OR

// C++
class Solution {
public:
    int distinctPrimeFactors(vector<int>& nums) {
        vector<int> prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};
        unordered_set<int> Set;
        for(int num: nums) {
            for(int p: prime) {
                while(num > 1 && num % p == 0) {
                    Set.insert(p);
                    num /= p;
                }
            }
            if(num > 1) Set.insert(num);
        }
        return Set.size();
    }
};


// Golang
func distinctPrimeFactors(nums []int) int {
    notPrime := make([]bool, 1001)
    notPrime[0], notPrime[1] = true, true
    for i := 2; i <= 1000; i++ {
        if notPrime[i] {continue}
        for j := i + i; j <= 1000; j += i {
            notPrime[j] = true
        }
    }
    Set := make(map[int]bool)
    for _, num := range nums {
        for i := 2; i <= num; i++ {
            if notPrime[i] {continue}
            for num > 1 && num % i == 0 {
                Set[i] = true
                num /= i
            }
        }
    }
    return len(Set)
}
