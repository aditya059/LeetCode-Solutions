class Solution {
public:
    long long maximumTripletValue(vector<int>& nums) {
        long long ans = 0;
        for(int i = 0; i < nums.size(); i++) {
            for(int j = i + 1; j < nums.size(); j++) {
                for(int k = j + 1; k < nums.size(); k++) {
                    long long value = (nums[i] - nums[j]) * 1L * nums[k];
                    if(value > ans)
                        ans = value;
                }
            }
        }
        return ans;
    }
};

OR

class Solution {
public:
    long long maximumTripletValue(vector<int>& nums) {
        long long ans = 0;
        int n = nums.size();
        vector<int> rightMax(n);
        rightMax[n - 1] = nums[n - 1];
        for(int k = n - 2; k >= 0; k--) {
            rightMax[k] = max(rightMax[k + 1], nums[k]);
        }
        int leftMax = nums[0];
        for(int j = 1; j < n - 1; j++) {
            ans = max(ans, (long long)(leftMax - nums[j]) * rightMax[j + 1]);
            leftMax = max(leftMax, nums[j]);
        }
        return ans;
    }
};

OR
