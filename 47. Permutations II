class Solution {
public:
    void dfs(vector<vector<int>> &ans, vector<int> &perm, vector<int> &nums, map<int, int> &count) {
        if(nums.size() == perm.size()) {
            ans.push_back(perm);
            return;
        }
        for(auto iter: count) {
            if(iter.second) {
                count[iter.first]--;
                perm.push_back(iter.first);
                dfs(ans, perm, nums, count);
                perm.pop_back();
                count[iter.first]++;
            }
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<int> perm;
        vector<vector<int>> ans;
        map<int, int> count;
        for(int i = 0; i < nums.size(); i++) {
            count[nums[i]]++;
        }
        dfs(ans, perm, nums, count);
        return ans;
    }
};
