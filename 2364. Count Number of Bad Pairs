// C++
class Solution {
public:
    long long countBadPairs(vector<int>& nums) {
        int n = nums.size();
        unordered_map<int, int> Map;
        long long totalPairs = n * 1L * (n - 1) / 2;
        long long goodPairs = 0;
        for(int i = 0; i < n; i++) {
            goodPairs += Map[nums[i] - i]++;
        }
        return totalPairs - goodPairs;
    }
};


// Golang
func countBadPairs(nums []int) int64 {
    var n int64 = int64(len(nums))
    Map := make(map[int]int)
    var totalPairs int64 = n * (n - 1) / 2
    var goodPairs int64 = 0
    for i, num := range nums {
        goodPairs += int64(Map[num - i])
        Map[num - i]++
    }
    return totalPairs - goodPairs
}
