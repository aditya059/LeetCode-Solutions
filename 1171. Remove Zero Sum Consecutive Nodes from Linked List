/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeZeroSumSublists(ListNode* head) {
        unordered_map<int, ListNode*> Map;
        Map[0] = new ListNode(0, head);
        int sum = 0;
        while(head) {
            sum += head -> val;
            if(Map.find(sum) != Map.end()) {
                head = Map[sum] -> next;
                int val = sum + head -> val;
                while(val != sum) {
                    Map.erase(val);
                    head = head -> next;
                    val += head -> val;
                }
                Map[sum] -> next = head -> next;
            } else {
                Map[sum] = head;
            }
            head = head -> next;
        }
        return Map[0] -> next;
    }
};
