class Solution {
public:
    int minSetSize(vector<int>& arr) {
        int count[100001] = {0};
        for(int i = 0; i < arr.size(); i++) {
            count[arr[i]]++;
        }
        multimap<int, int, greater<int>> Map;
        for(int i = 0; i < 100001; i++) {
            Map.insert({count[i], i});
        }
        int ans = 0, sum = 0;
        for(auto iter: Map) {
            ans++;
            sum += iter.first;
            if(sum >= arr.size() / 2)
                return ans;
        }
        return ans;
    }
};

OR

class Solution {
public:
    int minSetSize(vector<int>& arr) {
        int count[100001] = {0};
        for(int i = 0; i < arr.size(); i++) {
            count[arr[i]]++;
        }
        vector<pair<int, int>> Map;
        for(int i = 0; i < 100001; i++) {
            if(count[i])
                Map.push_back({count[i], i});
        }
        sort(Map.begin(), Map.end(), [](const pair<int,int> &A, const pair<int,int> &B) {return A.first > B.first;});
        int ans = 0, sum = 0;
        for(auto iter: Map) {
            ans++;
            sum += iter.first;
            if(sum >= arr.size() / 2)
                return ans;
        }
        return ans;
    }
};
