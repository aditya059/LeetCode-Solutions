class Solution {
public:
    int findTheLongestSubstring(string s) {
        unordered_map<int, int> Map;
        Map[0] = -1;
        int ans = 0, prefix = 0;
        for(int i = 0; i < s.length(); i++) {
            if(s[i] == 'a') prefix ^= 1;
            else if(s[i] == 'e') prefix ^= 2;
            else if(s[i] == 'i') prefix ^= 4;
            else if(s[i] == 'o') prefix ^= 8;
            else if(s[i] == 'u') prefix ^= 16;
            if(Map.find(prefix) == Map.end()) Map[prefix] = i;
            else ans = max(ans, i - Map[prefix]);
        }
        return ans;
    }
};

OR

class Solution {
public:
    int findTheLongestSubstring(string s) {
        vector<int> Map(32, -2);
        Map[0] = -1;
        int ans = 0, prefix = 0;
        for(int i = 0; i < s.length(); i++) {
            if(s[i] == 'a') prefix ^= 1;
            else if(s[i] == 'e') prefix ^= 2;
            else if(s[i] == 'i') prefix ^= 4;
            else if(s[i] == 'o') prefix ^= 8;
            else if(s[i] == 'u') prefix ^= 16;
            if(Map[prefix] == -2) Map[prefix] = i;
            else ans = max(ans, i - Map[prefix]);
        }
        return ans;
    }
};
