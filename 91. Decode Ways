class Solution {
public:
    int compute(string s, map<string, int> &DP) {
        if(!s.length()) {
            return 1;
        }
        if(DP.find(s) != DP.end())
            return DP[s];
        for(int i = 1; i <= 26; i++) {
            if(i < 10 && i == s[0] - '0')
                DP[s] += compute(s.substr(1), DP);
            if(i / 10 != 0 && i / 10 == s[0] - '0' && i % 10 == s[1] - '0')
                DP[s] += compute(s.substr(2), DP);
        }
        return DP[s];
    }
    int numDecodings(string s) {
        map<string, int> DP;
        compute(s, DP);
        return DP[s];
    }
};

OR

class Solution {
public:
    int compute(string &s, int j, vector<int> &DP, vector<bool> &calc) {
        if(j == s.length()) {
            return 1;
        }
        if(calc[j])
            return DP[j];
        for(int i = 1; i <= 26; i++) {
            if(i < 10 && i == s[j] - '0')
                DP[j] += compute(s, j + 1, DP, calc);
            if(i / 10 != 0 && i / 10 == s[j] - '0' && i % 10 == s[j + 1] - '0')
                DP[j] += compute(s, j + 2, DP, calc);
        }
        calc[j] = true;
        return DP[j];
    }
    int numDecodings(string s) {
        vector<int> DP(s.length(), 0);
        vector<bool> calc(s.length(), false);
        return compute(s, 0, DP, calc);
    }
};

OR

class Solution {
public:
    int numDecodings(string s) {
        int DP = 0, DP1 = 1, DP2 = 0;
        for(int i = s.length() - 1; i >= 0; i--) {
            if(s[i] != '0')
                DP += DP1;
            if(i < s.length() - 1 && (s[i] == '1' || s[i] == '2' && s[i + 1] <= '6'))
                DP += DP2;
            DP2 = DP1;
            DP1 = DP;
            DP = 0;
        }
        return DP1;
    }
};
