// C++
class Solution {
public:
    int sumOfBeauties(vector<int>& nums) {
        int n = nums.size();
        vector<int> prefix(n), suffix(n);
        prefix[0] = nums[0];
        suffix[n - 1] = nums[n - 1];
        for(int i = 1; i < n; i++) {
            prefix[i] = max(nums[i], prefix[i - 1]);
            suffix[n - 1 - i] = min(nums[n - 1 - i], suffix[n - i]);
        }
        int ans = 0;
        for(int i = 1; i < n - 1; i++) {
            if(nums[i] > prefix[i - 1] && nums[i] < suffix[i + 1]) ans += 2;
            else if(nums[i] > nums[i - 1] && nums[i] < nums[i + 1]) ans++;
        }
        return ans;
    }
};


// Golang
func max(a, b int) int {
    if a > b {return a}
    return b
}

func min(a, b int) int {
    if a < b {return a}
    return b
}

func sumOfBeauties(nums []int) int {
    var n int = len(nums)
    prefix := make([]int, n)
    suffix := make([]int, n)
    prefix[0] = nums[0]
    suffix[n - 1] = nums[n - 1]
    for i := 1; i < n; i++ {
        prefix[i] = max(nums[i], prefix[i - 1])
        suffix[n - 1 - i] = min(nums[n - 1 - i], suffix[n - i])
    }
    var ans int = 0
    for i := 1; i < n - 1; i++ {
        if nums[i] > prefix[i - 1] && nums[i] < suffix[i + 1] {
            ans += 2
        } else if nums[i] > nums[i - 1] && nums[i] < nums[i + 1] {
            ans++
        } 
    }
    return ans
}
