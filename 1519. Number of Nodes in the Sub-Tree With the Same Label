class Solution {
public:
    void dfs(int curr, vector<int> adjList[], int count[], string &labels, vector<int> &ans) {
        if(ans[curr] == 0) {
            ans[curr] = 1;
            for(int next: adjList[curr]) {
                int temp[26] = {0};
                dfs(next, adjList, temp, labels, ans);
                for(int i = 0; i < 26; i++) 
                    count[i] += temp[i];
            }
            ans[curr] = ++count[labels[curr] - 'a'];
        }
    }
    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) {
        vector<int> adjList[n];
        int count[26] = {0};
        vector<int> ans(n);
        for(vector<int> edge: edges) {
            adjList[edge[0]].push_back(edge[1]);
            adjList[edge[1]].push_back(edge[0]);
        }
        dfs(0, adjList, count, labels, ans);
        return ans;
    }
};
