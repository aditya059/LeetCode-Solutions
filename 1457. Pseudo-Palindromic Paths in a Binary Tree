/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root, int &ans, vector<int> &count) {
        if(!root) 
            return;
        count[root -> val]++;
        if(!root -> left && !root -> right) {
            int mod2one = 0;
            for(int i = 1; i < 10; i++) {
                if(count[i] % 2 == 1)
                    mod2one++;
            }
            if(mod2one < 2) 
                ans++;
            count[root -> val]--;
            return;
        }
        solve(root -> left, ans, count);
        solve(root -> right, ans, count);
        count[root -> val]--;
    }
    int pseudoPalindromicPaths (TreeNode* root) {
        int ans = 0;
        vector<int> count(10, 0);
        solve(root, ans, count);
        return ans;
    }
};

OR

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root, int &ans, int count) {
        if(!root) 
            return;
        count ^= (1 << root -> val);
        if(!root -> left && !root -> right) {
            if((count == 0 || (count & (count - 1)) == 0))
                ans++;
            return;
        }
        solve(root -> left, ans, count);
        solve(root -> right, ans, count);
    }
    int pseudoPalindromicPaths (TreeNode* root) {
        int ans = 0;
        int count = 0;
        solve(root, ans, count);
        return ans;
    }
};
