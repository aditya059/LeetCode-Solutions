// Using multiset - TC = O(n log n)
class Solution {
public:
    int findMaxValueOfEquation(vector<vector<int>>& points, int k) {
        multiset<int> Set;
        int ans = INT_MIN;
        for(int start = 0, end = 0; end < points.size(); end++) {
            while(points[end][0] - points[start][0] > k) {
                Set.erase(Set.find(points[start][1] - points[start][0]));
                start++;
            }
            if(!Set.empty()) 
                ans = max(ans, points[end][0] + points[end][1] + *Set.rbegin());
            Set.insert(points[end][1] - points[end][0]);
        }
        return ans;
    }
};


OR


// Using Priority Queue - TC = O(n log n)
class Solution {
public:
    int findMaxValueOfEquation(vector<vector<int>>& points, int k) {
        priority_queue<pair<int, int>> PQ;
        int ans = INT_MIN;
        for(int end = 0; end < points.size(); end++) {
            while(!PQ.empty() && points[end][0] - PQ.top().second > k) {
                PQ.pop();
            }
            if(!PQ.empty()) 
                ans = max(ans, points[end][0] + points[end][1] + PQ.top().first);
            PQ.push({points[end][1] - points[end][0], points[end][0]});
        }
        return ans;
    }
};


OR


// Using Deque - TC = O(n)
class Solution {
public:
    int findMaxValueOfEquation(vector<vector<int>>& points, int k) {
        deque<pair<int, int>> DQ;
        int ans = INT_MIN;
        for(int end = 0; end < points.size(); end++) {
            int diff = points[end][1] - points[end][0];
            while(!DQ.empty() && points[end][0] - DQ.front().second > k) DQ.pop_front();
            if(!DQ.empty()) ans = max(ans, points[end][0] + points[end][1] + DQ.front().first);
            while(!DQ.empty() && diff >= DQ.back().first) DQ.pop_back();
            DQ.push_back({diff, points[end][0]});
        }
        return ans;
    }
};
