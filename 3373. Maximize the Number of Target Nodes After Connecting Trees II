class Solution {
    void dfs(int curr, int parent, vector<vector<int>>& adjList, bool color, vector<bool> &colors, int count[]){
        colors[curr] = color;
        count[color]++;
        for(int next: adjList[curr]) {
            if(next != parent)
                dfs(next, curr, adjList, !color, colors, count);
        }
    }
    vector<vector<int>> createGraph(vector<vector<int>>& edges) {
        vector<vector<int>> adjList(edges.size() + 1);
        for(int i = 0; i < edges.size(); i++) {
            adjList[edges[i][0]].push_back(edges[i][1]);
            adjList[edges[i][1]].push_back(edges[i][0]);
        }
        return adjList;
    }
public:
    vector<int> maxTargetNodes(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {
        int n = edges1.size() + 1, m = edges2.size() + 1;
        vector<vector<int>> adjList1 = createGraph(edges1);
        vector<vector<int>> adjList2 = createGraph(edges2);
        vector<bool> colors1(n), colors2(m);
        int count1[2] = {0}, count2[2] = {0};
        dfs(0, -1, adjList1, false, colors1, count1);
        dfs(0, -1, adjList2, false, colors2, count2);
        vector<int> ans(n);
        for(int i = 0; i < n; i++) {
            ans[i] = count1[colors1[i]] + max(count2[0], count2[1]);
        }
        return ans;
    }
};
