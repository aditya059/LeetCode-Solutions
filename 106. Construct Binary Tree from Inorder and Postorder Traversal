//--------------------------------------------------------------
// C++
//--------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* compute(vector<int>& postorder, map<int, int>& Map, int left, int right, int &rootIndex) {
        if(left > right) 
            return NULL;
        int p = Map[postorder[rootIndex]];
        TreeNode* node = new TreeNode(postorder[rootIndex]);
        rootIndex--;
        node -> right = compute(postorder, Map, p + 1, right, rootIndex);
        node -> left = compute(postorder, Map, left, p - 1, rootIndex);
        return node;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int rootIndex = inorder.size() - 1;
        map<int, int> Map;
        for(int i = 0; i < inorder.size(); i++) {
            Map[inorder[i]] = i;
        }
        return compute(postorder, Map, 0, inorder.size() - 1, rootIndex);
    }
};


//--------------------------------------------------------------
// Golang
//--------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

func compute(postorder []int, Map map[int]int, left, right int, rootIndex int) *TreeNode {
    if left > right {return nil} 
    p := Map[postorder[rootIndex]]
    node := &TreeNode {
        Val: postorder[rootIndex],
        Left: nil,
        Right: nil,
    }
    
    node.Right = compute(postorder, Map, p + 1, right, rootIndex - 1)
    node.Left = compute(postorder, Map, left, p - 1, rootIndex - 1)
    return node
}

func buildTree(inorder []int, postorder []int) *TreeNode {
    rootIndex := len(inorder) - 1
    Map := make(map[int]int)
    for i := 0; i < len(inorder); i++ {
        Map[inorder[i]] = i
    }
    return compute(postorder, Map, 0, len(inorder) - 1, rootIndex)
}    
