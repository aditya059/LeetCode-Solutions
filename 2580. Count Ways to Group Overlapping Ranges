// C++
class Solution {
public:
    int countWays(vector<vector<int>>& ranges) {
        const int mod = 1e9 + 7; 
        sort(ranges.begin(), ranges.end());
        int last = -1, count = 0;
        for(vector<int> range: ranges) {
            if(range[0] > last) count++;
            last = max(last, range[1]);
        }
        int ans = 1;
        for(int i = 0; i < count; i++) {
            ans = (ans << 1) % mod;
        }
        return ans;
    }
};


// Golang
func countWays(ranges [][]int) int {
    const mod int = 1e9 + 7 
    sort.Slice(ranges, func(i, j int) bool {
        return ranges[i][0] < ranges[j][0]
    })
    var last, count int = -1, 0
    for _, r := range ranges {
        if r[0] > last {count++}
        if r[1] > last {
            last = r[1]
        }
    }
    var ans int = 1
    for i := 0; i < count; i++ {
        ans = (ans << 1) % mod
    }
    return ans
}
