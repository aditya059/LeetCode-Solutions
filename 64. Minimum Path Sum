// C++
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        for(int i = 1; i < n; i++) 
            grid[0][i] += grid[0][i - 1];
        for(int i = 1; i < m; i++) 
            grid[i][0] += grid[i - 1][0];
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                grid[i][j] += min(grid[i - 1][j], grid[i][j - 1]);
            }
        }
        return grid[m - 1][n - 1];
    }
};


// Golang
func min(a, b int) int {
    if a < b {return a}
    return b
}

func minPathSum(grid [][]int) int {
    var m int = len(grid)
    var n int = len(grid[0])
    for i := 1; i < n; i++ {
        grid[0][i] += grid[0][i - 1]
    } 
    for i := 1; i < m; i++ {
        grid[i][0] += grid[i - 1][0]
    } 
    for i := 1; i < m; i++ {
        for j := 1; j < n; j++ {
            grid[i][j] += min(grid[i - 1][j], grid[i][j - 1])
        }
    }
    return grid[m - 1][n - 1]
}
