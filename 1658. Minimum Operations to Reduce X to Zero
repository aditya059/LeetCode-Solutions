// Solution 1: Prefix Sum + Binary Search
class Solution {
public:
    int minOperations(vector<int>& nums, int x) {
        int n = nums.size(), ans = INT_MAX;
        vector<int> prefix(n + 1);
        for(int i = 1; i <= n; i++) {
            prefix[i] = prefix[i - 1] + nums[i - 1];
            if(prefix[i] == x) ans = i;
        }
        int sum = 0;
        for(int i = n - 1; i >= 0; i--) {
            sum += nums[i];
            int index = lower_bound(prefix.begin(), prefix.begin() + i, x - sum) - prefix.begin();
            if(prefix[index] == x - sum) {
                ans = min(ans, index + n - i);
            }
        }
        return ans == INT_MAX? -1: ans;
    }
};


// Solution 2: Prefix Sum + Map
class Solution {
public:
    int minOperations(vector<int>& nums, int x) {
        int n = nums.size(), ans = -1;
        x = accumulate(nums.begin(), nums.end(), 0) - x;
        unordered_map<int, int> Map;
        Map[0] = -1;
        int currSum = 0;
        for(int i = 0; i < n; i++) {
            currSum += nums[i];
            Map[currSum] = i;
            if(Map.find(currSum - x) != Map.end())
                ans = max(ans, i - Map[currSum - x]);
        }
        return ans == -1? -1: n - ans;
    }
};


// Solution 3: Prefix Sum + Sliding Window
class Solution {
public:
    int minOperations(vector<int>& nums, int x) {
        int n = nums.size(), ans = -1;
        x = accumulate(nums.begin(), nums.end(), 0) - x;
        int currSum = 0;
        for(int start = 0, end = 0; end < n; end++) {
            currSum += nums[end];
            while(start <= end && currSum > x) {
                currSum -= nums[start++];
            }
            if(currSum == x) ans = max(ans, end - start + 1);
        }
        return ans == -1? -1: n - ans;
    }
};
