class Solution {
public:
    typedef struct {
        int speed;
        int efficiency;
    } Engineers;
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        const int MOD = 1e9 + 7;
        vector<Engineers> engineer(n);
        for(int i = 0; i < n; i++) {
            engineer[i].speed = speed[i];
            engineer[i].efficiency = efficiency[i];
        }
        sort(engineer.begin(), engineer.end(), [&](Engineers &a, Engineers &b) {return a.efficiency > b.efficiency;});
        priority_queue<int, vector<int>, greater<int>> PQ;
        long totalSpeed = 0, ans = INT_MIN;
        for(int i = 0; i < n; i++) {
            if(PQ.size() == k) {
                totalSpeed -= PQ.top();
                PQ.pop();
            }
            PQ.push(engineer[i].speed);
            totalSpeed += engineer[i].speed;
            ans = max(ans, totalSpeed * engineer[i].efficiency);
        }
        return ans % MOD;
    }
};
