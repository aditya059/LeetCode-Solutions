// C++
class Solution {
public:
    int longestSubarray(vector<int>& nums) {
        int target = *max_element(nums.begin(), nums.end());
        int count = 0, n = nums.size(), ans = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == target) count++;
            else {
                ans = max(ans, count);
                count = 0;
            }
        }
        ans = max(ans, count);
        return ans;
    }
};

// Golang
func max(a, b int) int {
    if a > b {
        return a
    }
    return b
}
func longestSubarray(nums []int) int {
    var count, n, ans, target = 0, len(nums), 0, 0
    for _, num := range nums {
        target = max(target, num)
    }
    for i := 0; i < n; i++ {
        if nums[i] == target{
            count++
        } else {
            ans = max(ans, count)
            count = 0
        }
    }
    ans = max(ans, count)
    return ans
}
