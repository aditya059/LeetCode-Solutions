class Solution {
public:
    int maximumCount(vector<int>& nums) {
        int low = 0, high = nums.size() - 1, negCount = 0, posCount = 0;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] >= 0) {
                high = mid - 1;
            } else {
                negCount = max(negCount, mid + 1);
                low = mid + 1; 
            }
        }
        low = 0, high = nums.size() - 1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] <= 0) {
                low = mid + 1;
            } else {
                posCount = max(posCount, (int)nums.size() - mid);
                high = mid - 1; 
            }
        }
        return max(posCount, negCount);
    }
};

OR

class Solution {
public:
    int maximumCount(vector<int>& nums) {
        int n = nums.size();
        int posCount = nums.end() - lower_bound(nums.begin(), nums.end(), 1);
        int negCount = upper_bound(nums.begin(), nums.end(), -1) - nums.begin();
        return max(posCount, negCount);
    }
};
