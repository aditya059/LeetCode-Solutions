class Solution {
public:
    long long maximumTotalDamage(vector<int>& power) {
        map<int, int> Map;
        unordered_map<int, long> DP;
        for(int i = 0; i < power.size(); i++) {
            Map[power[i]]++;
        }
        Map[0] = 0;
        DP[0] = 0;
        for(auto iter = Map.begin(); iter != Map.end(); iter++) {
            auto i = Map.lower_bound(iter -> first - 2);
            DP[iter -> first] = max(DP[prev(iter) -> first], iter -> first * 1L * iter -> second + DP[(--i) -> first]);
        }
        return DP[(--Map.end()) -> first];
    }
};

OR

class Solution {
public:
    long long maximumTotalDamage(vector<int>& power) {
        sort(power.begin(), power.end());
        int n = power.size(), j = 0;
        long long ans = 0, maxDP = 0;
        vector<long long> DP(n + 1);
        for(int i = 0; i < n; i++) {
            if(power[i] == power[i > 0? i - 1: 0]) DP[i + 1] = DP[i] + power[i];
            else {
                while(power[j] < power[i] - 2)
                    maxDP = max(maxDP, DP[++j]);
                DP[i + 1] = maxDP + power[i];
            } 
            ans = max(ans, DP[i + 1]);
        }
        return ans;
    }
};
