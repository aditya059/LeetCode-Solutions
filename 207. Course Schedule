// C++
class Solution {
public:
    void dfs(int u, bool &ans, vector<char>& color, vector<int> adjList[]) {
        if(!ans || color[u] == 'G') {
            ans = false;
            return;
        }
        color[u] = 'G';
        for(int v: adjList[u]) {
            if(color[v] == 'W')
                dfs(v, ans, color, adjList);
            if(color[v] == 'G') {
                ans = false;
                return;
            }
        }
        color[u] = 'B';
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> adjList[numCourses];
        for(int i = 0; i < prerequisites.size(); i++) {
            adjList[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }
        bool ans = true;
        vector<char> color(numCourses, 'W');
        for(int i = 0; i < numCourses; i++) {
            if(color[i] == 'W')
                dfs(i, ans, color, adjList);
        }
        return ans;
    }
};


// Golang
func dfs(u int, ans *bool, color []byte, adjList [][]int) {
    if *ans == false || color[u] == 'G' {
        *ans = false
        return
    }
    color[u] = 'G'
    for _, v := range adjList[u] {
        if color[v] == 'W' {
            dfs(v, ans, color, adjList)
        } else if color[v] == 'G' {
            *ans = false
            return
        }
    }
    color[u] = 'B'
}

func canFinish(numCourses int, prerequisites [][]int) bool {
    adjList := make([][]int, numCourses)
    for i := 0; i < len(prerequisites); i++ {
        adjList[prerequisites[i][1]] = append(adjList[prerequisites[i][1]], prerequisites[i][0])
    }
    ans := true
    color := make([]byte, numCourses)
    for i := 0; i < numCourses; i++ {color[i] = 'W'}
    for i := 0; i < numCourses; i++ {
        if color[i] == 'W' {
            dfs(i, &ans, color, adjList)
        }
    }
    return ans
}
