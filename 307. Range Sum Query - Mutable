// BIT: Preprocessing - O(nlogn), Update - O(log n), Query - O(log n), Space - O(n) 
class NumArray {
public:
    vector<int> BIT;
    vector<int> numbers;
    NumArray(vector<int>& nums) {
        BIT.resize(nums.size() + 1);
        numbers.resize(nums.size());
        for(int i = 0; i < nums.size(); i++) {
            update(i, nums[i]);
        }
    }
    
    void update(int index, int val) {
        int x = val - numbers[index];
        numbers[index] = val;
        updateBIT(index + 1, x);
    }
    
    void updateBIT(int i, int val) {
        while(i < BIT.size()) {
            BIT[i] += val;
            i += i & -i;
        }
    }
    
    int getSum(int i) {
        int sum = 0;
        while(i > 0) {
            sum += BIT[i];
            i -= i & -i;
        }
        return sum;
    }
    
    int sumRange(int left, int right) {
        return getSum(right + 1) - getSum(left);
    }
};

OR

// SQRT Decomposition: Preprocessing - O(n), Update - O(1), Query - O(sqrt(n)), Space - O(sqrt(n)) 
class NumArray {
public:
    vector<int> numbers;
    vector<int> blockSum;
    int numOfBlocks;
    int blockSize;
    NumArray(vector<int>& nums) {
        blockSize = sqrt(nums.size());
        numOfBlocks = ceil(nums.size() * 1.0 / blockSize);
        numbers.resize(nums.size());
        blockSum.resize(numOfBlocks);
        for(int i = 0; i < nums.size(); i++) {
            numbers[i] = nums[i];
            blockSum[i / blockSize] += nums[i];
        }
    }
    
    void update(int index, int val) {
        blockSum[index / blockSize] += (val - numbers[index]);  
        numbers[index] = val; 
    }
    
    int sumRange(int left, int right) {
        int sum = 0;
        int start = left / blockSize;
        int end = right / blockSize;
        if(start == end) {
            for(int i = left; i <= right; i++) 
                sum += numbers[i];
            return sum;
        }
        for(int i = (start + 1) * blockSize - 1; i >= left; i--) {
            sum += numbers[i];
        }
        for(int i = start + 1; i < end; i++) {
            sum += blockSum[i];
        }
        for(int i = end * blockSize; i <= right; i++) {
            sum += numbers[i];
        }
        return sum;
    }
};
